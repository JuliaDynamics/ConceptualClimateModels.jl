var documenterSearchIndex = {"docs":
[{"location":"submodules/globalmeanebm/#GlobalMeanEBM","page":"Global mean EBM","title":"GlobalMeanEBM","text":"","category":"section"},{"location":"submodules/globalmeanebm/","page":"Global mean EBM","title":"Global mean EBM","text":"GlobalMeanEBM","category":"page"},{"location":"submodules/globalmeanebm/#ConceptualClimateModels.GlobalMeanEBM","page":"Global mean EBM","title":"ConceptualClimateModels.GlobalMeanEBM","text":"GlobalMeanEBM\n\nSubmodule of ConceptualClimateModels which provides processes useful in creating global mean energy balance models. It is inspired by Budyko-Sellers-Ghil type models (without the latitudinal dependence). The mean does not have to be global, it can be hemispheric, or for other smaller regions.\n\n\n\n\n\n","category":"module"},{"location":"submodules/globalmeanebm/#Default-variables","page":"Global mean EBM","title":"Default variables","text":"","category":"section"},{"location":"submodules/globalmeanebm/","page":"Global mean EBM","title":"Global mean EBM","text":"using ConceptualClimateModels\nGlobalMeanEBM.globalmeanebm_variables","category":"page"},{"location":"submodules/globalmeanebm/#Temperature","page":"Global mean EBM","title":"Temperature","text":"","category":"section"},{"location":"submodules/globalmeanebm/","page":"Global mean EBM","title":"Global mean EBM","text":"GlobalMeanEBM.BasicRadiationBalance","category":"page"},{"location":"submodules/globalmeanebm/#ConceptualClimateModels.GlobalMeanEBM.BasicRadiationBalance","page":"Global mean EBM","title":"ConceptualClimateModels.GlobalMeanEBM.BasicRadiationBalance","text":"BasicRadiationBalance(; T, f, ASR, OLR, c_T = 5e8)\n\nCreate the equation\n\nc_T fracdTdt = ASR - OLR + f\n\nrepresenting the most basic radiative energy balance at the top of the atmosphere setting a global mean temperature, see e.g., any introductory article (North et al., 1981; Ghil, 1981). ASR is the absorbed solar radiation, which defaults to S*(1 - α) in the default processes. S is the received insolation, by default equal to solar_constant, but could e.g., be any astronomical forcing such as AstronomicalForcingDeSaedeleer. α is the albedo and f any additional forcing such as CO2Forcing. OLR defaults to A + B*T. c_T is the heat capacity of the system in J/K/m². However, for convenience, the parameter added to the final equation is τ_T which is the timescale in seconds, i.e., c_T/solar_constant.\n\n\n\n\n\n","category":"type"},{"location":"submodules/globalmeanebm/#Temperature-difference","page":"Global mean EBM","title":"Temperature difference","text":"","category":"section"},{"location":"submodules/globalmeanebm/","page":"Global mean EBM","title":"Global mean EBM","text":"GlobalMeanEBM.ΔTLinearRelaxation\nGlobalMeanEBM.ΔTStommelModel","category":"page"},{"location":"submodules/globalmeanebm/#ConceptualClimateModels.GlobalMeanEBM.ΔTLinearRelaxation","page":"Global mean EBM","title":"ConceptualClimateModels.GlobalMeanEBM.ΔTLinearRelaxation","text":"ΔTLinearRelaxation(; ΔT, T, τ = 5e6, A = 36.53, B = 0.658)\n\nCreate the equation\n\ntau_Delta TfracDelta Tdt = Delta T_ref(T) - Delta T\n\nwhich exponentially relaxes the equator-to-pole temperature difference ΔT to its reference value Delta T_ref(T) = A - B*(T - 27515), i.e., it decreases linearly with global mean temperature T (in Kelvin). The default values for A, B are obtained from Equation (2) of (Gaskell et al., 2022). We also fitted paleoclimate data of (Osman et al., 2021) and found very similar results, A = 35.8, B = -1.11 for north hemisphere and A = 27.4, b = -0.513 for south.\n\nHere ΔT is defined as the temperature difference between average temperatures at (0, 30) and (60, 90) latitudes. The timescale is taken as 2 months, although if τ = 0 is given, the equation Delta T  Delta T_ref(T) is created instead.\n\n\n\n\n\n","category":"function"},{"location":"submodules/globalmeanebm/#ConceptualClimateModels.GlobalMeanEBM.ΔTStommelModel","page":"Global mean EBM","title":"ConceptualClimateModels.GlobalMeanEBM.ΔTStommelModel","text":"ΔTStommelModel(; ΔT=ΔT, ΔS=ΔS, η1 = 2, η2 = 1, η3 = 0.3)\n\nCreate the equations\n\ndotDelta T = eta_1 - Delta T - Delta T - Delta S Delta T\ndotDelta S = eta_2 - eta_3Delta S - Delta T - Delta S Delta S\n\nwhich are the two equations of the Stommel box model for Atlantic thermohaline circulation (Stommel, 1961), here presented in nondimensionalized form (Lohmann et al., 2021), so that temperature and sality are normalized by their coefficients a_T a_S relating them to the density of water\n\nrho = rho_0 1 - a_T(T - T_0) + a_S(S-S_0)\n\nfor some reference values.\n\n\n\n\n\n","category":"function"},{"location":"submodules/globalmeanebm/#Longwave-radiation","page":"Global mean EBM","title":"Longwave radiation","text":"","category":"section"},{"location":"submodules/globalmeanebm/","page":"Global mean EBM","title":"Global mean EBM","text":"GlobalMeanEBM.LinearOLR\nGlobalMeanEBM.LinearClearSkyOLR\nGlobalMeanEBM.EmissivityStefanBoltzmanOLR\nGlobalMeanEBM.EmissivityFeedbackTanh\nGlobalMeanEBM.EmissivitySellers1969\nGlobalMeanEBM.SoedergrenClearSkyEmissivity","category":"page"},{"location":"submodules/globalmeanebm/#ConceptualClimateModels.GlobalMeanEBM.LinearOLR","page":"Global mean EBM","title":"ConceptualClimateModels.GlobalMeanEBM.LinearOLR","text":"LinearOLR(; OLR, T, A = -277.0, B = 1.8)\n\nCreate the equation OLR ~ A + B*T. This is a linearized outgoing longwave radiation (OLR), and is the same equation as (7) of (North et al., 1981): OLR = A + BT with T temperature in Kelvin and A B constants. However, default A B are fitted from current CERES all sky OLR and using ERA5 data for the 2-meter temperature. We assume T in Kelvin. This linear approximation is quite accurate for temporally averaged data T in (220 280) however drops drastically in accuracy after that due to the nonlinear effects of clouds (as evident by observational data).\n\n(Koll and Cronin, 2018) provide a \"proof\" of the linearity of the clear sky OLR due to spectral properties of water vapor.\n\nWe note a big difference between current CERES data and the values reported in (North et al., 1981): here A=214.67 (assuming T in Celcius) and B=1.8 versus the values A=203.3 and B=2.09 in (North et al., 1981).\n\nIf instead of all sky, if we fit the clear sky CERES data, we get A = -326.0, B = 2.09. Interestingly, coefficient B here is the same as that reported by (North et al., 1981), but A=244.88 (assuming T in Celcius) is not.\n\n\n\n\n\n","category":"function"},{"location":"submodules/globalmeanebm/#ConceptualClimateModels.GlobalMeanEBM.LinearClearSkyOLR","page":"Global mean EBM","title":"ConceptualClimateModels.GlobalMeanEBM.LinearClearSkyOLR","text":"LinearClearSkyOLR(; kw...)\n\nEquivalent with LinearOLR(; A = A = -326.0, B = 2.09, kw...) and provided as a convenience for the clear sky fit to CERES data.\n\n\n\n\n\n","category":"function"},{"location":"submodules/globalmeanebm/#ConceptualClimateModels.GlobalMeanEBM.EmissivityStefanBoltzmanOLR","page":"Global mean EBM","title":"ConceptualClimateModels.GlobalMeanEBM.EmissivityStefanBoltzmanOLR","text":"EmissivityStefanBoltzmanOLR(; ε, T)\n\nCreate the equation OLR ~ ε*σ*T^4 where σ is the Stefan Boltzmann constant and ε the effective emissivity, also known as the \"grayness\" of the system, or the deviation it has from being a perfect black body (Ghil, 1981). ε then needs to be parameterized itself to include greenhouse or other climate effects.\n\n\n\n\n\n","category":"function"},{"location":"submodules/globalmeanebm/#ConceptualClimateModels.GlobalMeanEBM.EmissivityFeedbackTanh","page":"Global mean EBM","title":"ConceptualClimateModels.GlobalMeanEBM.EmissivityFeedbackTanh","text":"EmissivityFeedbackTanh(; ε, Τ, left = 0.5, right = 0.4, rate = 0.5, Tref = 288.0)\n\nCreate an equation that assigns emissivity ε to hyperbolic tangent of temperature T. This is an ad-hoc feedback  that was used in (Bastiaansen et al., 2023), similar to EmissivitySellers1969. In essence this is a TanhProcess with the given keywords as parameters.\n\n\n\n\n\n","category":"function"},{"location":"submodules/globalmeanebm/#ConceptualClimateModels.GlobalMeanEBM.EmissivitySellers1969","page":"Global mean EBM","title":"ConceptualClimateModels.GlobalMeanEBM.EmissivitySellers1969","text":"EmissivitySellers1969(; ε, T, m = 0.5)\n\nCreate the equation ε ~ 1 - m*tanh(19*T^6*1e-16), which was used originally in (Sellers, 1969) to represent the effect of \"water vapor, carbon dioxide, dust and clouds on terrestrial radiation\".\n\n\n\n\n\n","category":"function"},{"location":"submodules/globalmeanebm/#ConceptualClimateModels.GlobalMeanEBM.SoedergrenClearSkyEmissivity","page":"Global mean EBM","title":"ConceptualClimateModels.GlobalMeanEBM.SoedergrenClearSkyEmissivity","text":"SoedergrenClearSkyEmissivity(; ε, T, CO2, RH = 0.8, H_H20 = 2.0)\n\nCreate Eq. 10 of (Södergren et al., 2018), which is the same as Eq. 21 of (Barker and Ross, 1999) for the effective emissivity of clear sky atmosphere:\n\nvarepsilon = 1 - exp(0082 - (238*01*e_s*RH*H_H2O + 403*CO2*1e-6)^0294)\n\nwith e_s the saturation_vapor_pressure. The equation assumes CO2 concentration is in ppm and vapor pressure in kPa hence the conversion factors 0.1 and 1e-6.\n\nwarn: Atmospheric, not effective emissivity!\nBe advised: \"effective emissivity\" is a number multiplying surface outgoing radiation in models with only one layer, the surface: εσΤ^4. That is what other emissivity processes like EmissivitySellers1969 represent. Here this atmospheric emissivity is actual, not effective. It is supposed to be included in two layer models with one layer being atmosphere and one being surface. That is why this ε here increases with CO2/H2O concentrations. In contrast, the effective emissivity of a surface-only model would decrease with CO2/H2O concentrations.\n\n\n\n\n\n","category":"function"},{"location":"submodules/globalmeanebm/#Shortwave-radiation","page":"Global mean EBM","title":"Shortwave radiation","text":"","category":"section"},{"location":"submodules/globalmeanebm/","page":"Global mean EBM","title":"Global mean EBM","text":"GlobalMeanEBM.DirectAlbedoAddition\nGlobalMeanEBM.CoAlbedoProduct\nGlobalMeanEBM.SeparatedClearAllSkyAlbedo","category":"page"},{"location":"submodules/globalmeanebm/#ConceptualClimateModels.GlobalMeanEBM.DirectAlbedoAddition","page":"Global mean EBM","title":"ConceptualClimateModels.GlobalMeanEBM.DirectAlbedoAddition","text":"DirectAlbedoAddition(; α, α_bg = 0.1, other_albedo_variables = (α_ice, α_clouds))\n\nCreate the equation α ~ α_bg + other_albedo_variables..., meaning that planetary albedo α is a direct sum of all specified albedos.\n\n\n\n\n\n","category":"type"},{"location":"submodules/globalmeanebm/#ConceptualClimateModels.GlobalMeanEBM.CoAlbedoProduct","page":"Global mean EBM","title":"ConceptualClimateModels.GlobalMeanEBM.CoAlbedoProduct","text":"CoAlbedoProduct(; α, albedo_variables = (α_ice, α_cloud))\n\nCreate the equation 1 - α ~ prod(a -> (1 - a), albedo_variables) meaning that the co-albedo is the product of the co-albedos of all albedo variables. This would be e.g., the planetary albedo if all components were uniform layers, while the bottom-most layer (surface) had perfect absorption and all other layers had 0 absorption and finite reflection.\n\n\n\n\n\n","category":"type"},{"location":"submodules/globalmeanebm/#ConceptualClimateModels.GlobalMeanEBM.SeparatedClearAllSkyAlbedo","page":"Global mean EBM","title":"ConceptualClimateModels.GlobalMeanEBM.SeparatedClearAllSkyAlbedo","text":"SeparatedClearAllSkyAlbedo(; α, α_cloud, C, α_clr = 0.15)\n\nCreate the equation α ~ α_cloud*C + α_clr*(1 - C).\n\n(Bender et al., 2017) argue that one can assume a separation between clear-sky and cloud albedo, so that α = α_cloud*C + α_clr*(1 - C) with C the cloud fraction and α_clr the clear sky albedo. They further cite (Cess, 1976) to facilitate the claim Additionally, Eq. (20) of (Barker and Ross, 1999) provides an identical expression.\n\nIn most cases you want to provide a variable with its own process for α_clr.\n\n\n\n\n\n","category":"function"},{"location":"submodules/globalmeanebm/#Ice/snow","page":"Global mean EBM","title":"Ice/snow","text":"","category":"section"},{"location":"submodules/globalmeanebm/","page":"Global mean EBM","title":"Global mean EBM","text":"GlobalMeanEBM.IceAlbedoFeedback","category":"page"},{"location":"submodules/globalmeanebm/#ConceptualClimateModels.GlobalMeanEBM.IceAlbedoFeedback","page":"Global mean EBM","title":"ConceptualClimateModels.GlobalMeanEBM.IceAlbedoFeedback","text":"IceAlbedoFeedback(; T, α_ice,\n    max = 0.45, min = 0.1, Tscale = 10, Tfreeze = 275.15, τ = 0\n)\n\nCreate an equation that assigns ice albedo α_ice to a hyperbolic tangent of temperature T. This represents an approximately linear decrease with T, as ice melts over part of the earth, while it is constant for all T for which the earth would be either entirely ice covered (T < Tfreeze - scale) or ice free (T > Tfreeze).\n\nIn essence this is a TanhProcess with the given keywords as parameters with reference temperature Tref = Tfreeze - scale/2.\n\nThis albedo is the most common used large-scale feedback in energy balance models, e.g., (Ghil, 1981), although it is typically taken as a piece-wise linear function. There is little change with using a hyperbolic tangent instead, while the tanh offers a differentiable flow.\n\nThe timescale τ if not zero will make an ExpRelaxation process relaxing to the hyperbolic tangent.\n\n\n\n\n\n","category":"type"},{"location":"submodules/globalmeanebm/#Water-vapor","page":"Global mean EBM","title":"Water vapor","text":"","category":"section"},{"location":"submodules/globalmeanebm/","page":"Global mean EBM","title":"Global mean EBM","text":"GlobalMeanEBM.saturation_vapor_pressure","category":"page"},{"location":"submodules/globalmeanebm/#ConceptualClimateModels.GlobalMeanEBM.saturation_vapor_pressure","page":"Global mean EBM","title":"ConceptualClimateModels.GlobalMeanEBM.saturation_vapor_pressure","text":"saturation_vapor_pressure(T)\n\nGiven surface temperature (in K) return saturation pressure for water vapor (in kPa) using the Tetens-Murray formula from (Wikipedia contributors, 2023), which is A*exp(B*T/(C+T)). Different formula is used for when T is less than the freezing point.\n\n\n\n\n\n","category":"function"},{"location":"submodules/globalmeanebm/#Insolation","page":"Global mean EBM","title":"Insolation","text":"","category":"section"},{"location":"submodules/globalmeanebm/","page":"Global mean EBM","title":"Global mean EBM","text":"GlobalMeanEBM.AstronomicalForcingDeSaedeleer","category":"page"},{"location":"submodules/globalmeanebm/#ConceptualClimateModels.GlobalMeanEBM.AstronomicalForcingDeSaedeleer","page":"Global mean EBM","title":"ConceptualClimateModels.GlobalMeanEBM.AstronomicalForcingDeSaedeleer","text":"AstronomicalForcingDeSaedeleer(; S = S, extensive = false)\n\nCreate the equation S ~ astronomical_forcing_desaedeleer(t, extensive) which is Eq. (1) of (de Saedeleer et al., 2013):\n\nS = \\sum_i s_i \\sin(\\omega_i t) + c_i \\cos(\\omega_i t)\n\nwhere the values of omega_i s_i c_i come from (Berger, 1978) who performed a spectral expansion of the insolation. The validity range of this approximation is [-1, 0] Myr.\n\nIn the summation i goes up to 35 if extensive, otherwise up to 8. The components are sorted according to magnitude of the spectral line, so the default version has only the 8 most important spectra lines.\n\nNote that in contrast to Eq. (1) of (de Saedeleer et al., 2013) we do not normalize f and its value is in W/m² (the mean value is still deducted). Additionally, the values of omega_i have been adjusted to expect time in units of seconds.\n\n\n\n\n\n","category":"function"},{"location":"submodules/globalmeanebm/#Forcings","page":"Global mean EBM","title":"Forcings","text":"","category":"section"},{"location":"submodules/globalmeanebm/","page":"Global mean EBM","title":"Global mean EBM","text":"GlobalMeanEBM.CO2Forcing","category":"page"},{"location":"submodules/globalmeanebm/#ConceptualClimateModels.GlobalMeanEBM.CO2Forcing","page":"Global mean EBM","title":"ConceptualClimateModels.GlobalMeanEBM.CO2Forcing","text":"CO2Forcing(; f, CO2, CO2f = 3.7)\n\nCreate the equation f  CO2f log_2(CO2400) which describes the forcing added to the TOA energy balance due to CO2 concentrations, assumming the OLR expression is calibrated for 0 added forcing at 400 ppm which is the default for OLR expressions provided by ConceptualClimateModels.jl.\n\nThe default value of f comes from Eq. (3.2) of (Bastiaansen et al., 2023) which cites IPCC-5, while (Etminan et al., 2016) report practically the same value assuming a constant f (note here the log is base 2). In reality f depends on CO2 and other greenhouse gases concentrations due to spectral overlaps, see (Etminan et al., 2016) Sec. 4.\n\n\n\n\n\n","category":"type"},{"location":"submodules/globalmeanebm/#Clouds","page":"Global mean EBM","title":"Clouds","text":"","category":"section"},{"location":"submodules/globalmeanebm/","page":"Global mean EBM","title":"Global mean EBM","text":"GlobalMeanEBM.CloudAlbedoExponential\nGlobalMeanEBM.CloudAlbedoLinear\nGlobalMeanEBM.BudykoOLR","category":"page"},{"location":"submodules/globalmeanebm/#ConceptualClimateModels.GlobalMeanEBM.CloudAlbedoExponential","page":"Global mean EBM","title":"ConceptualClimateModels.GlobalMeanEBM.CloudAlbedoExponential","text":"CloudAlbedoExponential(\n    α_cloud, C, a = 2.499219232848238, b = 17.596369331717433\n)\n\nCreate the equation α_cloud ~ sinh(a*C)/b relating cloud albedo to cloud fraction C. This equation is exponential and not linear, as in observations. (Engström et al., 2015) (and also (Bender et al., 2017)) discuss this exponential relation in detail, and provide as explanation that cloud effective albedo increases with latitude (due to solar zenith changes) while cloud fraction also increases with latitude.\n\nNote that here however we modify the equation α_cloud ~ exp(a*C - b) of (Engström et al., 2015) to utilize the hyperbolic sine, so that α_cloud = 0 when C = 0 as is physically necessary. Then, a, b are extracted by fitting CERES data, using as α_cloud the energetically consistent cloud albedo as defined by (Datseris and Stevens, 2021), further yearly averaged and within latitudes (-60, 60) as in (Bender et al., 2017). This albedo can be directly added to the clear sky albedo to produce the planetary albedo.\n\n\n\n\n\n","category":"function"},{"location":"submodules/globalmeanebm/#ConceptualClimateModels.GlobalMeanEBM.CloudAlbedoLinear","page":"Global mean EBM","title":"ConceptualClimateModels.GlobalMeanEBM.CloudAlbedoLinear","text":"CloudAlbedoLinear(; α_cloud, C, a = 0.2252861764703435)\n\nSame as in CloudAlbedoExponential, but now the linear form α_cloud ~ a*C is returned, with a fitted from CERES data in the same way.\n\n\n\n\n\n","category":"function"},{"location":"submodules/globalmeanebm/#ConceptualClimateModels.GlobalMeanEBM.BudykoOLR","page":"Global mean EBM","title":"ConceptualClimateModels.GlobalMeanEBM.BudykoOLR","text":"BudykoOLR(; OLR=OLR, T=T, C=C,\n    BudykoOLR_A = -461.8068, BudykoOLR_B = 2.58978,\n    BudykoOLR_Ac = -377.22741, BudykoOLR_Bc = 1.536171\n)\n\nCreate the equation OLR ~ A + B*T - C*(Ac + Bc*T) for the dependence of OLR on both temperature and cloud fraction (in 0-1). This is the same as Eq. (1) of (Budyko, 1969). However, here T is expected in Kelvin, and the coefficients have been extracted by fitting into CERES data in the same way as in LinearOLR.\n\n\n\n\n\n","category":"function"},{"location":"submodules/globalmeanebm/#Default-processes","page":"Global mean EBM","title":"Default processes","text":"","category":"section"},{"location":"submodules/globalmeanebm/","page":"Global mean EBM","title":"Global mean EBM","text":"import ConceptualClimateModels.GlobalMeanEBM\ndefault_processes_eqs(GlobalMeanEBM)","category":"page"},{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"Barker, J. R. and Ross, M. H. (1999). An introduction to global warming. American Journal of Physics 67, 1216–1226.\n\n\n\nBastiaansen, R.; Ashwin, P. and von der Heydt, A. S. (2023). Climate response and sensitivity: time scales and late tipping points. Proceedings of the Royal Society A: Mathematical, Physical and Engineering Sciences 479, arXiv:2207.06110.\n\n\n\nBender, F. A.; Engström, A.; Wood, R. and Charlson, R. J. (2017). Evaluation of hemispheric asymmetries in marine cloud radiative properties. Journal of Climate 30, 4131–4147.\n\n\n\nBerger, A. (1978). Long-term variations of daily insolation and Quaternary climatic                changes. J. Atmos. Sci. 35, 2362–2367.\n\n\n\nBretherton, C. S. and Wyant, M. C. (1997). Moisture transport, lower-tropospheric stability, and decoupling of cloud-topped boundary layers. Journal of the Atmospheric Sciences 54, 148–167.\n\n\n\nBudyko, M. I. (1969). The effect of solar radiation variations on the climate of the Earth. Tellus 21, 611–619.\n\n\n\nCess, R. D. (1976). Climate change: An appraisal of atmospheric feedback mechanisms                employing zonal climatology. J. Atmos. Sci. 33, 1831–1843.\n\n\n\nDatseris, G. (2025). Sensitivity of stratocumulus–cumulus transitions in a cloudy energy balance model.\n\n\n\nDatseris, G. and Parlitz, U. (2022). Nonlinear dynamics. 1 Edition, Undergraduate Lecture Notes in Physics (Springer Nature, Cham, Switzerland).\n\n\n\nDatseris, G. and Stevens, B. (2021). Earth's Albedo and Its Symmetry. AGU Advances 2.\n\n\n\nEngström, A.; Bender, F. A.; Charlson, R. J. and Wood, R. (2015). The nonlinear relationship between albedo and cloud fraction on near-global, monthly mean scale in observations and in the CMIP5 model ensemble. Geophysical Research Letters 42, 9571–9578.\n\n\n\nEtminan, M.; Myhre, G.; Highwood, E. J. and Shine, K. P. (2016). Radiative forcing of carbon dioxide, methane, and nitrous oxide: A significant revision of the methane radiative forcing. Geophysical Research Letters 43, 12,614-12,623, arXiv:https://agupubs.onlinelibrary.wiley.com/doi/pdf/10.1002/2016GL071930.\n\n\n\nGaskell, D. E.; Huber, M.; O'Brien, C. L.; Inglis, G. N.; Acosta, R. P.; Poulsen, C. J. and Hull, P. M. (2022). The latitudinal temperature gradient and its climate dependence                as inferred from foraminiferal delta18O over the past 95                million years. Proc. Natl. Acad. Sci. U. S. A. 119, e2111332119.\n\n\n\nGhil, M. (1981). Energy-Balance Models: An Introduction. In: Climatic Variations and Variability: Facts and Theories (Springer Netherlands, Dordrecht); pp. 461–480.\n\n\n\nKoll, D. D. and Cronin, T. W. (2018). Earth's outgoing longwave radiation linear due to H 2 O greenhouse effect. Proceedings of the National Academy of Sciences 115, 10293–10298.\n\n\n\nLohmann, J.; Castellana, D.; Ditlevsen, P. D. and Dijkstra, H. A. (2021). Abrupt climate change as a rate-dependent cascading tipping                point. Earth Syst. Dyn. 12, 819–835.\n\n\n\nMatsunobu, L. M. and Coimbra, C. F. (2024). On Effective Spectral Wideband Models for Clear Sky Atmospheric Emissivity and Transmissivity. Journal of Geophysical Research: Atmospheres 129.\n\n\n\nNorth, G. R.; Cahalan, R. F. and Coakley, J. A. (1981). Energy balance climate models. Reviews of Geophysics 19, 91.\n\n\n\nOsman, M. B.; Tierney, J. E.; Zhu, J.; Tardif, R.; Hakim, G. J.; King, J. and Poulsen, C. J. (2021). Globally resolved surface temperatures since the Last Glacial                Maximum. Nature 599, 239–244.\n\n\n\nRandall, D. A. and Suarez, M. J. (1984). On the Dynamics of Stratocumulus Formation and Dissipation. Journal of the Atmospheric Sciences 41, 3052–3057.\n\n\n\nde Saedeleer, B.; Crucifix, M. and Wieczorek, S. (2013). Is the astronomical forcing a reliable and unique pacemaker for climate? A conceptual model study. Climate Dynamics 40, 273–294, arXiv:1109.6214.\n\n\n\nSellers, W. D. (1969). A Global Climatic Model Based on the Energy Balance of the Earth-Atmosphere System. Journal of Applied Meteorology 8, 392–400.\n\n\n\nSinger, C. E. and Schneider, T. (apr 2023). CO2-driven stratocumulus cloud breakup in a bulk boundary layer model.\n\n\n\nStevens, B. (2006). Bulk boundary-layer concepts for simplified models of tropical dynamics. Theoretical and Computational Fluid Dynamics 20, 279–304.\n\n\n\nStommel, H. (1961). Thermohaline convection with two stable regimes of flow. Tellus 13, 224–230.\n\n\n\nSödergren, A. H.; McDonald, A. J. and Bodeker, G. E. (2018). An energy balance model exploration of the impacts of interactions between surface albedo, cloud cover and water vapor on polar amplification. Climate Dynamics 51, 1639–1658.\n\n\n\nWikipedia contributors (2023). Tetens equation — Wikipedia, The Free Encyclopedia. [Online; accessed 6-February-2024].\n\n\n\n","category":"page"},{"location":"examples/globalmeanebm/#GlobalMeanEBM_examples","page":"Global mean EBM","title":"GlobalMeanEBM","text":"","category":"section"},{"location":"examples/globalmeanebm/","page":"Global mean EBM","title":"Global mean EBM","text":"In this page we go through various examples of combining processes to make models that have been already used in the literature, or using DynamicalSystems.jl or other packages to analyse conceptual climate models.","category":"page"},{"location":"examples/globalmeanebm/#Classic-Snowball-Earth-hysteresis","page":"Global mean EBM","title":"Classic Snowball Earth hysteresis","text":"","category":"section"},{"location":"examples/globalmeanebm/","page":"Global mean EBM","title":"Global mean EBM","text":"The origins of energy balance models ((Sellers, 1969; Budyko, 1969; Ghil, 1981; North et al., 1981)) examined the impact of variations in insolation on the global climate. In particular, they studied how simple energy balance models with only ice-albedo and water vapor feedbacks yielded bi-stable hysteresis between a cold \"snowball\" state and a warm Earth, as the solar constant was varied. The same kind of behaviour is also used in (Datseris and Parlitz, 2022; Ch. 2) as an introductory example to dynamical systems.","category":"page"},{"location":"examples/globalmeanebm/","page":"Global mean EBM","title":"Global mean EBM","text":"We can easily replicate such a model by creating a global-mean temperature model without even having the water vapor feedback. We will combine the processes:","category":"page"},{"location":"examples/globalmeanebm/","page":"Global mean EBM","title":"Global mean EBM","text":"using ConceptualClimateModels\nusing ConceptualClimateModels.GlobalMeanEBM\n\nbudyko_processes = [\n    BasicRadiationBalance(),\n    EmissivityStefanBoltzmanOLR(),\n    IceAlbedoFeedback(; min = 0.3, max = 0.7),\n    α ~ α_ice,\n    ParameterProcess(ε), # emissivity is a parameter\n    f ~ 0, # no external forcing\n    # absorbed solar radiation has a default process\n]\n\nbudyko = processes_to_coupledodes(budyko_processes, GlobalMeanEBM)\nprintln(dynamical_system_summary(budyko))","category":"page"},{"location":"examples/globalmeanebm/","page":"Global mean EBM","title":"Global mean EBM","text":"We can perform a typical hysteresis loop analysis straightforwardly by doing a continuation analysis with the Attractors.jl subpackage of DynamicalSystems.jl.","category":"page"},{"location":"examples/globalmeanebm/","page":"Global mean EBM","title":"Global mean EBM","text":"For setting up the continuation we leverage the integration with DynamicalSystems.jl:","category":"page"},{"location":"examples/globalmeanebm/","page":"Global mean EBM","title":"Global mean EBM","text":"using DynamicalSystems\n\ngrid = plausible_grid(budyko)\nmapper = AttractorsViaRecurrences(budyko, grid)\nrfam = RecurrencesFindAndMatch(mapper)\nsampler = plausible_ic_sampler(budyko)\nsampler() # randomly sample initial conditions","category":"page"},{"location":"examples/globalmeanebm/","page":"Global mean EBM","title":"Global mean EBM","text":"Now, to obtain the symbolic parameter index corresponding to the insolation parameter, there are several ways as described in the main tutorial. The simplest way is","category":"page"},{"location":"examples/globalmeanebm/","page":"Global mean EBM","title":"Global mean EBM","text":"index = :ε_0","category":"page"},{"location":"examples/globalmeanebm/","page":"Global mean EBM","title":"Global mean EBM","text":"Now we perform the continuation versus the effective emissivity, to approximate increasing or decreasing the strength of the greenhouse effect:","category":"page"},{"location":"examples/globalmeanebm/","page":"Global mean EBM","title":"Global mean EBM","text":"εrange = 0.3:0.01:0.8\nfractions_curves, attractors_info = global_continuation(\n    rfam, εrange, index, sampler;\n    samples_per_parameter = 1000,\n    show_progress = false,\n)","category":"page"},{"location":"examples/globalmeanebm/","page":"Global mean EBM","title":"Global mean EBM","text":"and visualize it","category":"page"},{"location":"examples/globalmeanebm/","page":"Global mean EBM","title":"Global mean EBM","text":"using CairoMakie\na2r = A -> first(first(A)) # plot attractor: extract first point and first dimension of point\nplot_basins_attractors_curves(fractions_curves, attractors_info, a2r, εrange)","category":"page"},{"location":"examples/globalmeanebm/","page":"Global mean EBM","title":"Global mean EBM","text":"we see there are two attractors at low and high temperatures and that they have approximately the same basin fractions of 50% each.","category":"page"},{"location":"examples/globalmeanebm/#Rate-dependent-tipping-in-the-Stommel-model","page":"Global mean EBM","title":"Rate dependent tipping in the Stommel model","text":"","category":"section"},{"location":"examples/globalmeanebm/","page":"Global mean EBM","title":"Global mean EBM","text":"The Stommel model is a good example for rate dependent tipping (Lohmann et al., 2021). We can modify the process ΔTStommelModel and make its parameter η3 be a time- dependent variable instead, like so:","category":"page"},{"location":"examples/globalmeanebm/","page":"Global mean EBM","title":"Global mean EBM","text":"using ConceptualClimateModels\nusing ConceptualClimateModels.GlobalMeanEBM\n\n@variables η1(t)\n@parameters η1_0 = 2.0 # starting value for η1 parameter\n@parameters r_η = 0.0  # the rate that η1 changes\n\nprocesses = [\n    ΔTStommelModel(; η1 = η1), # replace keyword with a symbolic variable\n    η1 ~ η1_0 + r_η*t, # this symbolic variable has its own equation!\n]\n\nstommel = processes_to_coupledodes(processes, GlobalMeanEBM)\nprintln(dynamical_system_summary(stommel))","category":"page"},{"location":"examples/globalmeanebm/","page":"Global mean EBM","title":"Global mean EBM","text":"At the moment r_η = 0 and the system is autonomous. Hence, we can easily estimate its bifurcation diagram using the same steps as the above example.","category":"page"},{"location":"examples/globalmeanebm/","page":"Global mean EBM","title":"Global mean EBM","text":"using DynamicalSystems\n\ngrid = plausible_grid(stommel)\nmapper = AttractorsViaRecurrences(stommel, grid;\n    consecutive_recurrences = 1000, attractor_locate_steps = 10,\n)\nrfam = RecurrencesFindAndMatch(mapper)\nsampler = plausible_ic_sampler(stommel)\n\nηrange = 2.0:0.01:4.0\nfractions_curves, attractors_info = global_continuation(\n    rfam, ηrange, η1_0, sampler;\n    samples_per_parameter = 1000,\n    show_progress = false,\n)","category":"page"},{"location":"examples/globalmeanebm/","page":"Global mean EBM","title":"Global mean EBM","text":"and visualize it","category":"page"},{"location":"examples/globalmeanebm/","page":"Global mean EBM","title":"Global mean EBM","text":"using CairoMakie\na2r = A -> first(first(A)) # plot attractor: extract first point and first dimension of point\nfig = plot_attractors_curves(attractors_info, a2r, ηrange)\nax = content(fig[1,1])\nax.ylabel = \"ΔT - fixed points\"\nax.xlabel = \"parameter η1\"\nfig","category":"page"},{"location":"examples/globalmeanebm/","page":"Global mean EBM","title":"Global mean EBM","text":"Alright, now we can perform simple simulations where we evolve the system forwards in time while η_1 increases at different rates. We can use the trajectory function to evolve it and due to the nice integration between DynamicalSystems.jl and ModelingToolkit.jl we can use any \"observable\" of the system for the trajectory output.","category":"page"},{"location":"examples/globalmeanebm/","page":"Global mean EBM","title":"Global mean EBM","text":"r1, r2 = 0.02, 0.2\nu0 = [1.61334  1.85301] # always start from same state\nset_parameter!(stommel, η1_0, 2.0) # set it to initial value\n\nfor (j, r) in enumerate((r1, r2))\n    # update the named parameter `r_η` to the numeric value `r`\n    set_parameter!(stommel, r_η, r)\n    # simulate until η1 becomes 4\n    tfinal = (4.0 - default_value(η1_0))/r\n    # trajectory: first column = ΔΤ, second column = η1\n    X, tvec = trajectory(stommel, tfinal, u0; save_idxs = [ΔT, η1])\n    lines!(ax, X[:, 2], X[:, 1]; color = Cycled(j+2), label = \"r_η = $(r)\")\nend\naxislegend(ax; unique = true, position = :lt)\nylims!(ax, 1, 4)\nfig","category":"page"},{"location":"examples/globalmeanebm/","page":"Global mean EBM","title":"Global mean EBM","text":"As you can see from the figure, depending on the rate the system either \"tracks\" the fixed point of high ΔΤ or it collapses down to the small ΔT branch. This happens because the system crosses the unstable manifold of the lower branch (Datseris and Parlitz, 2022; Chap. 12).","category":"page"},{"location":"examples/ctmlm/#ctmlm_examples","page":"Cloud Topped Mixed Layer Model","title":"CloudToppedMixedLayerModel","text":"","category":"section"},{"location":"examples/ctmlm/","page":"Cloud Topped Mixed Layer Model","title":"Cloud Topped Mixed Layer Model","text":"using DynamicalSystems, ConceptualClimateModels\nimport ConceptualClimateModels.CloudToppedMixedLayerModel as CTMLM","category":"page"},{"location":"examples/ctmlm/#Fixed-states-of-Stevens-2006","page":"Cloud Topped Mixed Layer Model","title":"Fixed states of Stevens 2006","text":"","category":"section"},{"location":"examples/ctmlm/","page":"Cloud Topped Mixed Layer Model","title":"Cloud Topped Mixed Layer Model","text":"Here we want to recreate the same bulk boundary layer model defined in (Stevens, 2006), equations 31-33.","category":"page"},{"location":"examples/ctmlm/","page":"Cloud Topped Mixed Layer Model","title":"Cloud Topped Mixed Layer Model","text":"const cₚ = 1004.0 # heat capacity at constant pressure (J/K/kg)\n\neqs = [\n    CTMLM.mlm_dynamic(),\n    CTMLM.entrainment_velocity(:Stevens2006; use_augmentation = false),\n    ## Figure 1 and Sec. 4.2 provide these values:\n    CTMLM.s₊ ~ 301200.0/cₚ,\n    CTMLM.q₊ ~ 1.56,\n    CTMLM.s₀ ~ CTMLM.s₊ - 12.5,\n    CTMLM.ρ₀ ~ 1,\n    CTMLM.q₀ ~ CTMLM.q_saturation(288.96 + 1.25),\n    CTMLM.ΔF ~ 40.0\n]","category":"page"},{"location":"examples/ctmlm/","page":"Cloud Topped Mixed Layer Model","title":"Cloud Topped Mixed Layer Model","text":"We now give these equations to the main function that creates a DynamicalSystem from the processes (and we also provide CTMLM to obtain default processes from)","category":"page"},{"location":"examples/ctmlm/","page":"Cloud Topped Mixed Layer Model","title":"Cloud Topped Mixed Layer Model","text":"ds = processes_to_coupledodes(eqs, CTMLM)","category":"page"},{"location":"examples/ctmlm/","page":"Cloud Topped Mixed Layer Model","title":"Cloud Topped Mixed Layer Model","text":"We also make sure to use the same parameter values as in the paper:","category":"page"},{"location":"examples/ctmlm/","page":"Cloud Topped Mixed Layer Model","title":"Cloud Topped Mixed Layer Model","text":"set_parameter!(ds, :D, 4e-6)\nset_parameter!(ds, :c_d, 0.0011)\nset_parameter!(ds, :U, 0.008/0.0011) # U*c_d = 0.008\nset_parameter!(ds, :e_e, 1.0) # effective emissivity","category":"page"},{"location":"examples/ctmlm/","page":"Cloud Topped Mixed Layer Model","title":"Cloud Topped Mixed Layer Model","text":"And that's all. We can run the system to its steady state:","category":"page"},{"location":"examples/ctmlm/","page":"Cloud Topped Mixed Layer Model","title":"Cloud Topped Mixed Layer Model","text":"step!(ds, 100.0)","category":"page"},{"location":"examples/ctmlm/","page":"Cloud Topped Mixed Layer Model","title":"Cloud Topped Mixed Layer Model","text":"leading to a steady state with height z_b (h_infty in (Stevens, 2006)) of about 800 meters as in the paper. Extracting the variable sigma of Eq. 38 is also very easy:","category":"page"},{"location":"examples/ctmlm/","page":"Cloud Topped Mixed Layer Model","title":"Cloud Topped Mixed Layer Model","text":"Δs = CTMLM.s₊ - CTMLM.s₀ # symbolic variable not existing in the graph of the `ds`\nσ = observe_state(ds, CTMLM.V * Δs / CTMLM.ΔF * cₚ)","category":"page"},{"location":"examples/ctmlm/","page":"Cloud Topped Mixed Layer Model","title":"Cloud Topped Mixed Layer Model","text":"and we get the same value (note multiplication by cₚ, because s is in units of K).","category":"page"},{"location":"examples/ctmlm/","page":"Cloud Topped Mixed Layer Model","title":"Cloud Topped Mixed Layer Model","text":"If you want to see a list of all equations that compose the dynamical system then do","category":"page"},{"location":"examples/ctmlm/","page":"Cloud Topped Mixed Layer Model","title":"Cloud Topped Mixed Layer Model","text":"all_equations(ds)","category":"page"},{"location":"examples/ctmlm/","page":"Cloud Topped Mixed Layer Model","title":"Cloud Topped Mixed Layer Model","text":"In the compiled documentation these render via LaTeX but running this in the REPL won't be as pretty :)","category":"page"},{"location":"examples/ctmlm/#Adding-clouds","page":"Cloud Topped Mixed Layer Model","title":"Adding clouds","text":"","category":"section"},{"location":"examples/ctmlm/","page":"Cloud Topped Mixed Layer Model","title":"Cloud Topped Mixed Layer Model","text":"We can add clouds to the mixed layer model using the same decoupling-based approach as in (Datseris, 2025) (while keeping SST a fixed boundary condition) just by including a couple more equations to the ones already defined, so that C mathcalD have a process assigned to them. We will also augment ΔF to be partially proportional to C using a very simple ad-hoc approach.","category":"page"},{"location":"examples/ctmlm/","page":"Cloud Topped Mixed Layer Model","title":"Cloud Topped Mixed Layer Model","text":"eqs = [\n    CTMLM.mlm_dynamic(),\n    CTMLM.entrainment_velocity(:Stevens2006; use_augmentation = false),\n    ## Cloud stuff\n    CTMLM.cf_dynamic(),\n    CTMLM.decoupling_variable(),\n    CTMLM.cloud_layer_thickness(:Bolton1980),\n    CTMLM.CTRC ~ 10 + 40*CTMLM.C, # cloud top radiative cooling\n    CTMLM.ΔF ~ CTMLM.CTRC, # same equation\n    ## rest the same\n    CTMLM.s₊ ~ 301200.0/cₚ,\n    CTMLM.q₊ ~ 1.56,\n    CTMLM.s₀ ~ CTMLM.s₊ - 12.5,\n    CTMLM.ρ₀ ~ 1,\n    CTMLM.q₀ ~ CTMLM.q_saturation(288.96 + 1.25),\n]\n\nds = processes_to_coupledodes(eqs, CTMLM)","category":"page"},{"location":"examples/ctmlm/","page":"Cloud Topped Mixed Layer Model","title":"Cloud Topped Mixed Layer Model","text":"And we run the model to a steady state:","category":"page"},{"location":"examples/ctmlm/","page":"Cloud Topped Mixed Layer Model","title":"Cloud Topped Mixed Layer Model","text":"set_parameter!(ds, :D, 4e-6)\nset_parameter!(ds, :c_d, 0.0009)\nset_parameter!(ds, :U, 6.8) # U*c_d = 0.008\nset_parameter!(ds, :e_e, 1.0) # effective emissivity\n\nstep!(ds, 100.0)\nobserve_state.(ds, (:z_b, :q_b, :s_b, :C)) # get state variables by name","category":"page"},{"location":"examples/ctmlm/#Climate-change-scenario:-increasing-SST","page":"Cloud Topped Mixed Layer Model","title":"Climate change scenario: increasing SST","text":"","category":"section"},{"location":"examples/ctmlm/","page":"Cloud Topped Mixed Layer Model","title":"Cloud Topped Mixed Layer Model","text":"If you want to study multistability for alternate cloud states (Cumulus vs Stratocumulus), or perform continuations (like the climate change scenarios in (Datseris, 2025)), visit the documentation of Attractors.jl.","category":"page"},{"location":"examples/ctmlm/","page":"Cloud Topped Mixed Layer Model","title":"Cloud Topped Mixed Layer Model","text":"As a brief example we will perform a simple climate change scenario where SST increases with a constant rate. First, we modify the equations so that s₀, q₀ are derived from a prescribed SST:","category":"page"},{"location":"examples/ctmlm/","page":"Cloud Topped Mixed Layer Model","title":"Cloud Topped Mixed Layer Model","text":"@parameters SST = 290.0\neqs = [\n    CTMLM.mlm_dynamic(),\n    CTMLM.entrainment_velocity(:Stevens2006; use_augmentation = false),\n    ## Cloud stuff\n    CTMLM.cf_dynamic(),\n    CTMLM.decoupling_variable(),\n    CTMLM.cloud_layer_thickness(:Bolton1980),\n    CTMLM.CTRC ~ 10 + 40*CTMLM.C, # cloud top radiative cooling\n    CTMLM.ΔF ~ CTMLM.CTRC, # same equation\n    ## Usage of SST\n    CTMLM.s₀ ~ SST,\n    CTMLM.q₀ ~ CTMLM.q_saturation(SST),\n    ## rest the same\n    CTMLM.s₊ ~ 301200.0/cₚ,\n    CTMLM.q₊ ~ 1.56,\n    CTMLM.ρ₀ ~ 1,\n]\n\nds = processes_to_coupledodes(eqs, CTMLM)\nset_parameter!(ds, :D, 4e-6)\nset_parameter!(ds, :c_d, 0.0009)\nset_parameter!(ds, :U, 6.8) # U*c_d = 0.008\nset_parameter!(ds, :e_e, 1.0) # effective emissivity\nds","category":"page"},{"location":"examples/ctmlm/","page":"Cloud Topped Mixed Layer Model","title":"Cloud Topped Mixed Layer Model","text":"To perform global continuation we need to create an attractor mapper, which we create here by tessellating the state space. Have a look at the Attractors.jl tutorial if the next few lines of code are puzzling to you","category":"page"},{"location":"examples/ctmlm/","page":"Cloud Topped Mixed Layer Model","title":"Cloud Topped Mixed Layer Model","text":"\ngrid = (\n    (0:100.0:3000), # height\n    (270:5.0:330), # static energy\n    (1:1.0:25), # specific humidity\n    (0:0.1:1), # cloud fraction\n)\n\nsampler, = statespace_sampler(grid)\n\nmapper = AttractorsViaRecurrences(ds, grid)\nascm = AttractorSeedContinueMatch(mapper)\n\nfs = basins_fractions(mapper, sampler)\nattractors = extract_attractors(mapper)","category":"page"},{"location":"examples/ctmlm/","page":"Cloud Topped Mixed Layer Model","title":"Cloud Topped Mixed Layer Model","text":"with the sampler, mapper, ascm data structures in order, we can easily now run a global continuation with changing SST:","category":"page"},{"location":"examples/ctmlm/","page":"Cloud Topped Mixed Layer Model","title":"Cloud Topped Mixed Layer Model","text":"prange = 290:1:310\npidx = :SST\nfractions_cont, attractors_cont = global_continuation(ascm, prange, pidx, sampler)\nattractors_cont","category":"page"},{"location":"examples/ctmlm/","page":"Cloud Topped Mixed Layer Model","title":"Cloud Topped Mixed Layer Model","text":"if you are not sure what the output means, no worries, just have a look at the Attractors.jl documentation. Here we visualize the cloud fraction:","category":"page"},{"location":"examples/ctmlm/","page":"Cloud Topped Mixed Layer Model","title":"Cloud Topped Mixed Layer Model","text":"using CairoMakie\n\n# cloud fraction and height values of last point on the attractor\nvalues = [A -> A[end][4], A -> A[end][1]]\n\nfig = plot_basins_attractors_curves(\n\tfractions_cont, attractors_cont, values, prange,\n)\ncontent(fig[2,1]).ylabel = \"C\"\ncontent(fig[3,1]).ylabel = \"z_b\"\nfig","category":"page"},{"location":"examples/ctmlm/","page":"Cloud Topped Mixed Layer Model","title":"Cloud Topped Mixed Layer Model","text":"we see for our ad hoc parameterizations, the dynamical system has no stable states for SST > 297. Before that cloud fraction decreases very fast from a Stratocumulus state to a Cumulus one.","category":"page"},{"location":"examples/ctmlm/","page":"Cloud Topped Mixed Layer Model","title":"Cloud Topped Mixed Layer Model","text":"The model diverges due to the definition of the entrainment velocity (which is proportional to ΔF/Δ₊s) in combination with a fixed s₊: the model reaches a state where Δ₊s is so small that height increases unnaturally well beyond the state space tessellation we defined.","category":"page"},{"location":"#ConceptualClimateModels.jl","page":"Introduction","title":"ConceptualClimateModels.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"ConceptualClimateModels","category":"page"},{"location":"#ConceptualClimateModels","page":"Introduction","title":"ConceptualClimateModels","text":"ConceptualClimateModels.jl\n\n(Image: docsdev) (Image: docsstable) (Image: CI) (Image: codecov) (Image: Package Downloads)\n\nConceptualClimateModels.jl is a Julia package for creating and analysing conceptual models of climate, such as energy balance models, glaciation cycle models, or climate tipping models. Such conceptual models are simplified representation of basic climate components, and the processes that connect them, such as flows of energy or mass. Within this context such models are typically coupled ordinary differential equations (with partial or stochastic DEs also being possible).\n\nConceptualClimateModels.jl accelerates both modelling and analysis aspects of working with such models by:\n\nBuilding upon ModelingToolkit.jl for creating equations from symbolic expressions.\nUtilizing ProcessBasedModelling.jl to provide a field-specific framework that allows easily testing different physical hypotheses regarding how climate variables couple to each other, or how climate processes are represented by equations.\nOffering many predefined processes from current literature and ongoing research. All predefined processes cite the literature rigorously using BiBTeX.\nBeing easy to extend with more climate variables or physical processes.\nAllowing the straightforward coupling of different conceptual models with each other.\nAutomating the naming of custom parameters relating to existing climate processes.\nIntegrating with DynamicalSystems.jl to automate the start-up phase of typical nonlinear dynamics based workflows.\n\nwith other features coming soon, such as:\n\nSupport for latitudinal models (where each variable is vector-valued over latitude circles)\nSupport for stochastic ordinary differential equations\n\nTo install it, run import Pkg; Pkg.add(\"ConceptualClimateModels\").\n\nAll further information is provided in the documentation, which you can either find online or build locally by running the docs/make.jl file.\n\nConceptualClimateModels.jl development is funded by UKRI's Engineering and Physical Sciences Research Council, grant no. EP/Y01653X/1 (grant agreement for a EU Marie Sklodowska-Curie Postdoctoral Fellowship).\n\n\n\n\n\n","category":"module"},{"location":"","page":"Introduction","title":"Introduction","text":"ConceptualClimateModels.jl is organized in submodules, each targeting a particular climate modelling scenario. Before delving into the individual submodule examples, it is recommended to go through the tutorial to familiarize yourself with the broader modelling infrastructure.","category":"page"},{"location":"#ask_questions","page":"Introduction","title":"Asking questions","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"See https://github.com/JuliaDynamics/.github/blob/main/SUPPORT.md.","category":"page"},{"location":"#Contributing","page":"Introduction","title":"Contributing","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"See https://github.com/JuliaDynamics/.github/blob/main/CONTRIBUTING.md.","category":"page"},{"location":"tutorial/#tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/#Terminology","page":"Tutorial","title":"Terminology","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"ConceptualClimateModels.jl follows a process-based modelling approach to make differential equation systems from processes. A process is simply a particular equation defining the dynamics of a climate variable, while also explicitly defining which variable the equation defines. A vector of processes is composed by the user, and given to the main function processes_to_coupledodes which bundles them into a system of equations that creates a dynamical system. The dynamical system can then be further analyzed in terms of stability properties, multistability, tipping, periodic (or not) behavior, chaos, and many more aspects, via the DynamicalSystems.jl library (see the examples).","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Note the distinction: a process is not the climate variable (such as \"clouds\" or  \"insolation\"); rather it is the exact equation that defines the behavior of the climate variable, and could itself utilize many other already existing climate variables, or introduce new ones. In terminology of climate science a process is a generalization of the term \"parameterization\". Many different processes may describe the behavior of a particular variable and typically one wants to analyze what the model does when using one versus the other process.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"note: Familiarity with DynamicalSystems.jl and ModelingToolkit.jl\nConceptualClimateModels.jl uses ModelingToolkit.jl for building the equations representing the climate model via symbolic expressions. It then uses DynamicalSystems.jl to further analyze the models. Familiarity with either package is good to have (but not mandatory), and will allow you to faster and better understand the concepts discussed here.","category":"page"},{"location":"tutorial/#Introductory-example","page":"Tutorial","title":"Introductory example","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Let's say that we want to create the most basic energy balance model,","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"c_T fracdTdt = ASR - OLR + f","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"where ASR is the absorbed solar radiation given by","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"ASR = S (1-alpha)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"with alpha the planetary albedo, OLR is the outgoing longwave radiation given by the linearized expression","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"OLR = A + BT","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"and f some radiative forcing at the top of the atmosphere, that is based on CO2 concentrations and given by","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"f = 37log_2left(fracCO_2400right)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"with CO2 concentrations in ppm.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To create this model with ConceptualClimateModels.jl while providing the least information possible we can do:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using ConceptualClimateModels\nusing ConceptualClimateModels.GlobalMeanEBM # submodule for global mean models\n\nprocesses = [\n    BasicRadiationBalance(),\n    LinearOLR(),\n    ParameterProcess(α),\n    CO2Forcing(), # for default CO2 valu this is zero forcing\n]\n\nds = processes_to_coupledodes(processes, GlobalMeanEBM)\nprintln(dynamical_system_summary(ds))","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The output is a dynamical system from DynamicalSystems.jl that is generated via symbolic expressions based on ModelingToolkit.jl, utilizing the process-based approach of ProcessBasedModelling.jl.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"As the dynamical system is made by symbolic expressions, these can be obtained back at any time:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using DynamicalSystems\n# access the MTK model that stores the symbolic bindings\nmtk = referrenced_sciml_model(ds)\n# show the equations of the dynamic state variables of the dynamical system\nequations(mtk)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"# show state functions that are observable,\n# i.e., they do not have a time derivative, they are not dynamic state variables\nobserved(mtk)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"# show parameters\nparameters(mtk)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The symbolic variables and parameters can also be used to query or alter the dynamical system. In the equations above we say that the symbolic variable CO2 was equated to the parameter CO2_0. There are multiple ways to obtain a symbolic index provided we know its name. First, we can re-create the symbolic parameter:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"index = only(@parameters CO2_0)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Second, we can use the retrieved MTK model and access its CO2_0 field, which will return the symbolic variable:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"index = mtk.CO2_0","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Third, we can use a Symbol corresponding to the variable name. This is typically the simplest way.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"index = :CO2_0","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"we can query the value of this named parameter in the system,","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"current_parameter(ds, index)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"or alter it:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"# access symbolic parameter CO2_0 from the tracked symbolic list of the model\nset_parameter!(ds, index, 800)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Similarly, we can obtain or alter values corresponding to the dynamic variables, or observed functions of the state of the system, using their symbolic indices. For example we can obtain the value corresponding to symbolic variable T at the current state of the dynamical system with:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"observe_state(ds, T) # binding `T` already exists in scope","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"We didn't have to create T because when we did using ConceptualClimateModels.GlobalMeanEBM, T was brought into scope. Similarly, we can obtain the OLR (outgoing longwave radiation), using the Symbol representation of the symbolic variable:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"observe_state(ds, :OLR)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The advantage of using the symbolic variable OLR itself instead of its Symbol representation, is that symbolic variables can do arbitrary symbolic computations. For example let's say that when we created the equations of the system we didn't have defined a variable representing the expression T^2OLR. That's not a problem, we can query the expression nevertheless:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"observe_state(ds, T^2/OLR) # symbolic expression","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Let's unpack the steps that led to this level of automation.","category":"page"},{"location":"tutorial/#Processes","page":"Tutorial","title":"Processes","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"A process is conceptually an equation the defines a climate variable or observable. All processes that define the system are then composed into a set of differential equations via processes_to_coupledodes (or processes_to_mtkmodel) that represent the climate model.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"For example, the process","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"T_process = BasicRadiationBalance()","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"is the process defining the variable T, representing temperature. We can learn this by either reading the documentation string of BasicRadiationBalance, or querying it directly:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using ProcessBasedModelling: lhs, rhs\n# This is the equation created by the process\nlhs(T_process) ~ rhs(T_process)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Notice that this process does not further define e.g. outgoing longwave radiation OLR(t). That is why in the original example we also provided LinearOLR, which defines it:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"OLR_process = LinearOLR()\nlhs(OLR_process) ~ rhs(OLR_process)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Each physical \"observable\" or variable that can be configured in the system has its own process. This allows very easily exchanging the way processes are represented by equations without having to alter many equations. For example, if instead of LinearOLR we have provided","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"OLR_process = EmissivityStefanBoltzmanOLR()\nlhs(OLR_process) ~ rhs(OLR_process)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"then we would have used a Stefan-Boltzmann grey-atmosphere representation for the outgoing longwave radiation. Notice how this introduced an additional variable varepsilon.","category":"page"},{"location":"tutorial/#Default-processes","page":"Tutorial","title":"Default processes","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Hold on a minute though, because in the original processes we provided,","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"processes = [\n    BasicRadiationBalance(),\n    LinearOLR(),\n    ParameterProcess(α),\n    CO2Forcing(),\n]","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"there was no process that defined for example the absorbed solar radiation ASR!","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Well, ConceptualClimateModels.jl allows the concept of default processes. The package exports some submodules, and each submodule targets a particular application of conceptual climate models. In this Tutorial we are using the GlobalMeanEBM submodule, which provides functionality to model global mean energy balance models.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Each submodule defines and exports its own list of predefined symbolic variables. When we wrote","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using ConceptualClimateModels.GlobalMeanEBM","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"we brought into scope all the variables that this (sub)module defines and exports, such as T, α, OLR.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Each (sub)module and provides a list of predefined processes for its predefined symbolic variables. These predefined default processes are loaded automatically when we provide the (sub)module as a second argument to processes_to_coupledodes, which we did above. In this (sub)module, the default process for the ASR is ASR = S(1-alpha) with S the solar constant.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The function processes_to_coupledodes goes through all processes the user provided and identifies variables that themselves do not have a process. It then checks the list of default processes and attempts to assign one to these variables. If there are no default processes for some variables, it makes the variables themselves parameters with the same name but with a subscript 0 if the variables have a default value.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"For example, let's assume that we completely remove default processes and we don't specify a process for the albedo α:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"processes = [\n    BasicRadiationBalance(),\n    LinearOLR(),\n    CO2Forcing(), # for default CO2 value this is zero forcing\n    ASR ~ S*(1-α), # add the processes for ASR, but not for S or α\n]","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"which we'll give to processes_to_mtkmodel. Notice how there is no second argument given, which would normally be the (sub)module to obtain default processes from.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"side note: we use `processtomtkmodelhere, as we don't care yet for making aDynamicalSystem`; just the symbolic model representation","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"mtk = processes_to_mtkmodel(processes)\n# we access the equations directly from the model\nequations(mtk)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"You will notice the equation α = α_0 where alpha_0 is now a parameter of the system (i.e., it can be altered after creating the system). The value of alpha_0 is the default value of alpha:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"default_value(α)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"# current value of the _parameter_ α_0 (not the variable!)\ndefault_value(mtk.α_0)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"When this automation occurs a warning is thrown:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"┌ Warning: Variable α(t) was introduced in process of variable ASR(t).\n│ However, a process for α(t) was not provided,\n│ and there is no default process for it either.\n│ Since it has a default value, we make it a parameter by adding a process:\n└ `ParameterProcess(α)`.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"ParameterProcess is the most trivial process: it simply means that the corresponding variable does not have any actual process describing it and rather it is a system parameter.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"This automation does not occur if there is no default value. For example, the ASR variable does not have a default value. If we have not assigned a process for ASR, the system construction would error instead:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"processes = [\n    BasicRadiationBalance(),\n    LinearOLR(),\n    CO2Forcing(),\n]\n\nmtk = processes_to_mtkmodel(processes)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"ERROR: ArgumentError: Variable ASR(t) was introduced in process of\nvariable T(t). However, a process for ASR(t) was not provided,\nthere is no default process for ASR(t), and ASR(t) doesn't have a default value.\nPlease provide a process for variable ASR(t).","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"These warnings and errors are always \"perfectly\" informative. They tell us exactly which variable does not have a process, and exactly which other process introduced the process-less variable first. This drastically improves the modelling experience, especially when large and complex models are being created.","category":"page"},{"location":"tutorial/#Adding-your-own-processes","page":"Tutorial","title":"Adding your own processes","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Each of the submodules of ConceptualClimateModels.jl provides an increasing list of predefined processes that you can use out of the box to compose climate models. The predefined processes all come from existing literature and cite their source via BiBTeX.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"It is also very easy to make new processes on your own. The simplest way to make a process is to just provide an equation for it with the l.h.s. of the equation being the variable the process defines.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"For example:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"@variables x(t) = 0.5 # all variables must be functions of (t)\nx_process = x ~ 0.5*T^2 # x is just a function of temperature","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"A more re-usable approach however is to create a function that generates a process or create a new process type as we describe in making new processes.","category":"page"},{"location":"tutorial/#A-note-on-symbolic-variable-instances","page":"Tutorial","title":"A note on symbolic variable instances","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Recall that when we wrote","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using ConceptualClimateModels.GlobalMeanEBM","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"at the start of this tutorial, we brought into scope variables that this (sub)module defines and exports, such as T, α, OLR. They are listed on the (sub)module's documentation page, and are used in that module's default processes.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"In some predefined processes documentation you will notice call signatures like","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"BasicRadiationBalance(; T, f, kwargs...)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"There are keywords that do not have an assignment like T, f above. This means that use the (sub)module's predefined variables.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Crucially, these default variables are symbolic variables. They are defined as","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"@variables begin\n    T(t) = 0.5 # ...\n    # ...\nend","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"which means that expressions that involve them result in symbolic expressions, for example","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"A2 = 0.5\nB2 = 0.5\nOLR2 = A2 + B2*T","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"In contrast, if we did instead","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"T2 = 0.5 # _not_ symbolic!\nOLR3 = A2 + B2*T2","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"This OLR3 is not a symbolic expression and cannot be used to represent a process.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"You can use your own variables in any predefined processes. You can define them by doing","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"@variables begin\n    (T1_tropics(t) = 290.0), [bounds = (200.0, 350.0), description = \"temperature in tropical box 1, in Kelvin\"]\nend","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"and then assign them to the corresponding keyword argument","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"process = BasicRadiationBalance(T = T1_tropics)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Defining variables with the extra bounds, description annotations is useful for integrating with the rest of the functionality of the library, and therefore it is strongly recommended.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"warn: Custom variables need to be assigned everywhere!\nAbove we assigned T1_tropics as the temperature variable. This means we also need to assign the same variable as the one setting the OLR variable by also providing the processes LinearOLR(T = T1_tropics) (for example).","category":"page"},{"location":"tutorial/#Default-values,-limits,-etc.","page":"Tutorial","title":"Default values, limits, etc.","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"All predefined variables that could be dynamic variables (i.e., could have a time derivative applied to them) have a default value, a description, and plausible physical bounds.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To obtain the default value, use default_value(x). For the description, use getdescription(x). For the bounds, see plausible_limits.","category":"page"},{"location":"tutorial/#Automatically-named-parameters","page":"Tutorial","title":"Automatically named parameters","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The majority of predefined processes create symbolic parameters that are automatically named based on the variables governing the processes. This default behaviour can be altered in two ways.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"For example, IceAlbedoFeedback adds named parameters to the equations whose name is derived from the name of the variable representing ice albedo:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"@variables my_ice_α(t) = 0.1 # don't forget the `(t)`!\nice_process = IceAlbedoFeedback(; α_ice = my_ice_α)\nprocesses = [ice_process]\n\nmtk = processes_to_mtkmodel(processes)\nequations(mtk)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"parameters(mtk)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"We can alter this behaviour by either providing our own named parameters to one of the keywords of the process, or wrapping a value around LiteralParameter to replace the parameter by a literal constant, like so:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"@parameters myfreeze = 260.0\nice_process = IceAlbedoFeedback(;\n    α_ice = my_ice_α,\n    Tfreeze = myfreeze, # my custom parameter\n    max = LiteralParameter(0.9) # don't make a parameter\n)\n\nmtk = processes_to_mtkmodel([ice_process])\nequations(mtk)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"parameters(mtk)","category":"page"},{"location":"tutorial/#Integration-with-DynamicalSystems.jl","page":"Tutorial","title":"Integration with DynamicalSystems.jl","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"ConceptualClimateModels.jl integrates with DynamicalSystems.jl. It provides some convenience functions that require ModelingToolkit.jl, such as dynamical_system_summary, plausible_limits or named_current_parameters, see below. Moreover, since all dynamical systems generated by ConceptualClimateModels.jl have symbolic bindings, one can use the symbolic variables in e.g., interactive GUI exploration or to access or set the parameters of the system.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"plausible_limits\nplausible_ic_sampler\nplausible_grid\ndynamical_system_summary\nnamed_current_parameters","category":"page"},{"location":"tutorial/#ConceptualClimateModels.plausible_limits","page":"Tutorial","title":"ConceptualClimateModels.plausible_limits","text":"plausible_limits(x::Num)\n\nReturn a tuple (min, max) of plausible limiting values for the variable x. If x is defined with the bounds metadata, this is returned as the limits. Else, if x has a default value, the limits are this value ± 20%. Else, if there is no default value, an error is thrown.\n\n\n\n\n\nplausible_limits(ds::DynamicalSystem [, idxs])\n\nReturn a vector of limits (min, max) for each dynamic state variable in ds. Optionally provide the idxs of the variables to use as a vector of Symbols for symbolic variables present in the referrenced MTK model of ds.\n\nSee also plausible_grid, plausible_ic_sampler.\n\n\n\n\n\n","category":"function"},{"location":"tutorial/#ConceptualClimateModels.plausible_ic_sampler","page":"Tutorial","title":"ConceptualClimateModels.plausible_ic_sampler","text":"plausible_ic_sampler(ds::DynamicalSystem [, seed])\n\nReturn a sampler that can be called as a 0-argument function sampler(), which yields random initial conditions within the hyperrectangle defined by the plausible_limits of ds. The sampler is useful to give to e.g., DynamicalSystems.basins_fractions.\n\n\n\n\n\n","category":"function"},{"location":"tutorial/#ConceptualClimateModels.plausible_grid","page":"Tutorial","title":"ConceptualClimateModels.plausible_grid","text":"plausible_grid(ds::DynamicalSystem, n = 101)\n\nReturn a grid that is a tuple of range objects that each spans the plausible_limits(ds). n can be an integer or a vector of integers (for each dimension). The resulting grid is useful to give to DynamicalSystems.AttractorsViaRecurrences.\n\n\n\n\n\n","category":"function"},{"location":"tutorial/#ConceptualClimateModels.dynamical_system_summary","page":"Tutorial","title":"ConceptualClimateModels.dynamical_system_summary","text":"dynamical_system_summary(ds::DynamicalSystem)\n\nReturn a printable/writable string containing a summary of ds, which outlines its current status and lists all symbolic equations and parameters that constitute the system, if a referrence to a ModelingToolkit.jl model exists in ds.\n\n\n\n\n\n","category":"function"},{"location":"tutorial/#ConceptualClimateModels.named_current_parameters","page":"Tutorial","title":"ConceptualClimateModels.named_current_parameters","text":"named_current_parameters(ds::DynamicalSystem)\n\nReturn a dictionary mapping parameters of ds (as Symbols) to their values.\n\n\n\n\n\n","category":"function"},{"location":"tutorial/#API-Reference","page":"Tutorial","title":"API Reference","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"processes_to_coupledodes\nprocesses_to_mtkmodel","category":"page"},{"location":"tutorial/#ConceptualClimateModels.processes_to_coupledodes","page":"Tutorial","title":"ConceptualClimateModels.processes_to_coupledodes","text":"processes_to_coupledodes(processes [, default]; kw...)\n\nConvert a given Vector of processes to a DynamicalSystem, in particular CoupledODEs. All processes represent symbolic equations managed by ModelingToolkit.jl. default is a vector for default processes that \"process-less\" variables introduced in processes will obtain. Use processes_to_mtkmodel to obtain the MTK model before it is structurally simplified and converted to a DynamicalSystem. See also processes_to_mtkmodel for more details on what processes is, or see the online Tutorial.\n\nKeyword arguments\n\ndiffeq: options passed to DifferentialEquations.jl ODE solving when constructing the CoupledODEs.\ninplace: whether the dynamical system will be in place or not. Defaults to true if the system dimension is ≤ 5.\nsplit = false: whether to split parameters as per ModelingToolkit.jl. Note the default is not ModelingToolkit's default, i.e., no splitting occurs. This accelerates parameter access, assuming all parameters are of the same type.\nkw...: all other keywords are propagated to processes_to_mtkmodel.\n\n\n\n\n\n","category":"function"},{"location":"tutorial/#ProcessBasedModelling.processes_to_mtkmodel","page":"Tutorial","title":"ProcessBasedModelling.processes_to_mtkmodel","text":"processes_to_mtkmodel(processes::Vector [, default]; kw...)\n\nConstruct a ModelingToolkit.jl model/system using the provided processes and default processes. The model/system is not structurally simplified. Use the function processes_to_mtkeqs to obtain the raw Vector{Equation} before it is passed to the MTK model/system like ODESystem.\n\nDuring construction, the following automations improve user experience:\n\nVariable(s) introduced in processes that does not itself have a process obtain a default process from default.\nIf no default exists, but the variable(s) itself has a default numerical value, a ParameterProcess is created for said variable and a warning is thrown.\nElse, an informative error is thrown.\nAn error is also thrown if any variable has two or more processes assigned to it.\n\nprocesses is a Vector whose elements can be:\n\nAny instance of a subtype of Process. Process is a wrapper around Equation that provides some conveniences, e.g., handling of timescales or not having limitations on the left-hand-side (LHS) form.\nAn Equation. The LHS format of the equation is limited. Let x be a @variable and p be a @parameter. Then, the LHS can only be one of: x, Differential(t)(x), Differential(t)(x)*p, p*Differential(t)(x), however, the versions with p may fail unexpectedly. Anything else will error.\nA Vector of the above two, which is then expanded. This allows the convenience of functions representing a physical process that may require many equations to be defined (because e.g., they may introduce more variables).\nA ModelingToolkit.jl XDESystem, in which case the equations of the system are expanded as if they were given as a vector of equations like above. This allows the convenience of straightforwardly coupling with already existing XDESystems.\n\nDefault processes\n\nprocesses_to_mtkmodel allows for specifying default processes by giving default. These default processes are assigned to variables introduced in the main input processes, but themselves do not have an assigned process in the main input.\n\ndefault can be a Vector of individual processes (Equation or Process). Alternatively, default can be a Module. The recommended way to build field-specific modelling libraries based on ProcessBasedModelling.jl is to define modules/submodules that offer a pool of pre-defined variables and processes. Modules may register their own default processes via the function register_default_process!. These registered processes are used when default is a Module.\n\nKeyword arguments\n\ntype = ODESystem: the model type to make.\nname = nameof(type): the name of the model.\nindependent = t: the independent variable (default: @variables t). t is also exported by ProcessBasedModelling.jl for convenience.\nwarn_default::Bool = true: if true, throw a warning when a variable does not have an assigned process but it has a default value so that it becomes a parameter instead.\n\n\n\n\n\n","category":"function"},{"location":"tutorial/#new_processes","page":"Tutorial","title":"Making new processes","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To make a new processes you can:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Create a function that given some keyword arguments uses one of the existing generic processes to make and return a process instance. Or, it can return an equation directly, provided it satisfies the format of processes_to_mtkmodel. For an example of this, see the source code of SeparatedClearAllSkyAlbedo or EmissivityFeedbackTanh.\nCreate a new Process subtype. This is preferred, because it leads to much better printing/display of the list of processes. For an example of this, see the source code of IceAlbedoFeedback. To create a new Process see the API of ProcessBasedModelling.jl or read the documentation string of Process below.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Process\nregister_default_process!","category":"page"},{"location":"tutorial/#ProcessBasedModelling.Process","page":"Tutorial","title":"ProcessBasedModelling.Process","text":"Process\n\nA new process must subtype Process and can be used in processes_to_mtkmodel. The type must extend the following functions from the module ProcessBasedModelling:\n\nlhs_variable(p) which returns the variable the process describes (left-hand-side variable). There is a default implementation lhs_variable(p) = p.variable if the field exists.\nrhs(p) which is the right-hand-side expression, i.e., the \"actual\" process.\n(optional) timescale(p), which defaults to NoTimeDerivative.\n(optional) lhs(p) which returns the left-hand-side. Let τ = timescale(p). Then default lhs(p) behaviour depends on τ as follows:\nJust lhs_variable(p) if τ == NoTimeDerivative().\nDifferential(t)(p) if τ == nothing, or multiplied with a number if τ isa LiteralParameter.\nτ_var*Differential(t)(p) if τ isa Union{Real, Num}. If real, a new named parameter τ_var is created that has the prefix :τ_ and then the lhs-variable name and has default value τ. Else if Num, τ_var = τ as given.\nExplicitly extend lhs_variable if the above do not suit you.\n\n\n\n\n\n","category":"type"},{"location":"tutorial/#ProcessBasedModelling.register_default_process!","page":"Tutorial","title":"ProcessBasedModelling.register_default_process!","text":"register_default_process!(process, m::Module; warn = true)\n\nRegister a process (Equation or Process) as a default process for its LHS variable in the list of default processes tracked by the given module. If warn, throw a warning if a default process with same LHS variable already exists and will be overwritten.\n\nYou can use default_processes to obtain the list of tracked default processes.\n\nnote: For developers\nIf you are developing a new module/package that is based on ProcessBasedModelling.jl, and within it you also register default processes, then enclose your register_default_process! calls within the module's __init__() function. For example:module MyProcesses\n# ...\n\nfunction __init__()\n    register_default_process!.(\n        [\n            process1,\n            process2,\n            # ...\n        ],\n        Ref(MyProcesses)\n    )\nend\n\nend # module\n\n\n\n\n\n","category":"function"},{"location":"tutorial/#generic_processes","page":"Tutorial","title":"Generic processes","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Processes that do not depend on any particular physical concept and instead provide a simple way to create new processes for a given climate variable:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"ParameterProcess\nTimeDerivative\nExpRelaxation\nAdditionProcess\nSigmoidProcess","category":"page"},{"location":"tutorial/#ProcessBasedModelling.ParameterProcess","page":"Tutorial","title":"ProcessBasedModelling.ParameterProcess","text":"ParameterProcess(variable, value = default_value(variable)) <: Process\n\nThe simplest process which equates a given variable to a constant value that is encapsulated in a parameter. If value isa Real, then a named parameter with the name of variable and _0 appended is created. Else, if valua isa Num then it is taken as the paremeter directly.\n\nExample:\n\n@variables T(t) = 0.5\nproc = ParameterProcess(T)\n\nwill create the equation T ~ T_0, where T_0 is a @parameter with default value 0.5.\n\n\n\n\n\n","category":"type"},{"location":"tutorial/#ProcessBasedModelling.TimeDerivative","page":"Tutorial","title":"ProcessBasedModelling.TimeDerivative","text":"TimeDerivative(variable, expression [, τ])\n\nThe second simplest process that equates the time derivative of the variable to the given expression while providing some conveniences over manually constructing an Equation.\n\nIt creates the equation τ_$(variable) Differential(t)(variable) ~ expression by constructing a new @parameter with default value τ (if τ is already a @parameter, it is used as-is). If τ is not given, then 1 is used at its place and no parameter is created.\n\nNote that if iszero(τ), then the process variable ~ expression is created.\n\n\n\n\n\n","category":"type"},{"location":"tutorial/#ProcessBasedModelling.ExpRelaxation","page":"Tutorial","title":"ProcessBasedModelling.ExpRelaxation","text":"ExpRelaxation(variable, expression [, τ]) <: Process\n\nA common process for creating an exponential relaxation of variable towards the given expression, with timescale τ. It creates the equation:\n\nτn*Differential(t)(variable) ~ expression - variable\n\nWhere τn is a new named @parameter with the value of τ and name τ_($(variable)). If instead τ is nothing, then 1 is used in its place (this is the default behavior). If iszero(τ), then the equation variable ~ expression is created instead.\n\nThe convenience function\n\nExpRelaxation(process, τ)\n\nallows converting an existing process (or equation) into an exponential relaxation by using the rhs(process) as the expression in the equation above.\n\n\n\n\n\n","category":"type"},{"location":"tutorial/#ProcessBasedModelling.AdditionProcess","page":"Tutorial","title":"ProcessBasedModelling.AdditionProcess","text":"AdditionProcess(process, added...)\n\nA convenience process for adding processes added to the rhs of the given process. added can be a single symbolic expression. Otherwise, added can be a Process or Equation, or multitude of them, in which case it is checked that the lhs_variable across all added components matches the process.\n\n\n\n\n\n","category":"type"},{"location":"tutorial/#ConceptualClimateModels.SigmoidProcess","page":"Tutorial","title":"ConceptualClimateModels.SigmoidProcess","text":"SigmoidProcess <: Process\nSigmoidProcess(variable, driver; left, right, scale, reference)\n\nA common process for when a variable has a sigmoidal dependence on a driver variable. The rest of the input arguments should be real numbers or @parameter named parameters.\n\nThe process creates a sigmoidal relationship based on the tanh function:\n\nvariable ~ left + (right - left)*(1 + tanh(2(driver - reference)/scale))*0.5\n\ni.e., the variable goes from value left to value right as driver increases over a range of scale (centered at reference). Instead of reference you may provide start or finish keywords, which make reference = start + scale/2 or reference = finish - scale/2 respectively.\n\nIf the values given to the parameters of the expression are real numbers, they become named parameters prefixed with the name of variable, then the name of the driver, and then _sigmoid_left, _sigmoid_right, _sigmoid_rate and _sigmoid_ref respectively. Use LiteralParameter for parameters you do not wish to rename.\n\n\n\n\n\n","category":"type"},{"location":"submodules/ctmlm/#ctmlm_docs","page":"Cloud Topped Mixed Layer Model","title":"CloudToppedMixedLayerModel","text":"","category":"section"},{"location":"submodules/ctmlm/","page":"Cloud Topped Mixed Layer Model","title":"Cloud Topped Mixed Layer Model","text":"CloudToppedMixedLayerModel","category":"page"},{"location":"submodules/ctmlm/#ConceptualClimateModels.CloudToppedMixedLayerModel","page":"Cloud Topped Mixed Layer Model","title":"ConceptualClimateModels.CloudToppedMixedLayerModel","text":"CloudToppedMixedLayerModel\n\nSubmodule providing processes about cloud topped mixed layer models (MLMs). This combines existing equations on MLM by (Stevens, 2006) and (Bretherton and Wyant, 1997), with surface energy balance and dynamic cloud equations. It is developed as part of the research article (Datseris, 2025). If you use this submodule, please cite the paper.\n\nThe organization is as follows:\n\nAll important variables and parameters (participate in many processes) are defined in the module file and as module-level scoped variables (global variables). Click the \"source\" of this docstring to access the module file.\nAll processes (physical equations) are defined in their respective files such as free_troposhere.jl, etc. Docstrings of important processes are expanded in the docs here. You will notice that all functions that return processes (equations) utilize these global variables and global parameters. Many of these functions will also define local variables and parameters. All noteworthy processes have docstrings that are expanded in the submodule online documentation. However, the majority of docstrings do not actually list the equations themselves. Simply click the \"source code\" button on the bottom right of each docstring to go to the source code. Because this package is written in Julia, and because it uses symbolic expressions throughout, reading the source code is truly as straight forward as reading Latex-rendered equations.\nThe default.jl file defines default processes for many global variables. These are also expanded in the docs.\n\nThroughout the submodule time is in units of days, specific humidity is in units of g/kg, liquid water static energy is in units of K (i.e., normalized by cₚ), height in meters, temperature in K, and all energy quantities are in W/m².\n\nTo learn how to use this submodule visit first the general tutorial of ConceptualClimateModels.jl and then the dedicated example on a cloudy mixed layer model. The module purposefully does not export any names, so the recommended way to use it is by an alias: import ConceptualClimateModels.CloudToppedMixedLayerModel as CTMLM.\n\n\n\n\n\n","category":"module"},{"location":"submodules/ctmlm/#Mixed-layer","page":"Cloud Topped Mixed Layer Model","title":"Mixed layer","text":"","category":"section"},{"location":"submodules/ctmlm/","page":"Cloud Topped Mixed Layer Model","title":"Cloud Topped Mixed Layer Model","text":"CloudToppedMixedLayerModel.mlm_dynamic\nCloudToppedMixedLayerModel.bbl_stevens2006_steadystate\nCloudToppedMixedLayerModel.temperature_exact\nCloudToppedMixedLayerModel.entrainment_velocity\nCloudToppedMixedLayerModel.q_liquid\nCloudToppedMixedLayerModel.q_saturation\nCloudToppedMixedLayerModel.pressure\nCloudToppedMixedLayerModel.sst_dynamic","category":"page"},{"location":"submodules/ctmlm/#ConceptualClimateModels.CloudToppedMixedLayerModel.mlm_dynamic","page":"Cloud Topped Mixed Layer Model","title":"ConceptualClimateModels.CloudToppedMixedLayerModel.mlm_dynamic","text":"mlm_dynamic()\n\nProvide equations 1-3 in (Datseris, 2025) (or, 31-33 in (Stevens, 2006)) defining the bulk boundary layer dynamics. An additional auxilary velocity -w_m is added in the equation for z_b and two auxilary export terms q_x s_x are added to the equations for q_b s_b. All these auxilarity terms are 0 by default (otherwise, assign a process to them).\n\n\n\n\n\n","category":"function"},{"location":"submodules/ctmlm/#ConceptualClimateModels.CloudToppedMixedLayerModel.bbl_stevens2006_steadystate","page":"Cloud Topped Mixed Layer Model","title":"ConceptualClimateModels.CloudToppedMixedLayerModel.bbl_stevens2006_steadystate","text":"bbl_stevens2006_steadystate(fixed; z_b, q_b, s_b, CLT)\n\nReturn the equations 35-38 in (Stevens, 2006) describing the analytically solved steady state of the MLM. These equations could be coupled to other parts of module but we have a problem of circular dependency for the steady state of z_b. If we attempt to couple them with the dynamic equations for C, then the following:\n\nz_b ~ h⃰ * (e_e*σ_38)/(1 + σ_38 - e_e),\nσ_38 ~ V*Δs*cₚ/(ΔF/ρ₀),\n\nyields a circular dependency: z_b depends on σ_38 which depends on ΔF which depends on T_t which depends on z_b. To resolve this a fixed option is given, which can be any of: ΔF, z_b, w_s, T_t. This quantity is set fixed and becomes a parameter so that the equation for z_b is closed.\n\n\n\n\n\n","category":"function"},{"location":"submodules/ctmlm/#ConceptualClimateModels.CloudToppedMixedLayerModel.temperature_exact","page":"Cloud Topped Mixed Layer Model","title":"ConceptualClimateModels.CloudToppedMixedLayerModel.temperature_exact","text":"temperature_exact(z, s, q)\n\nUse root-finding to find the temperature at height z given the liquid water static energy and total specific humidity, as described by (Stevens, 2006). This is the default equation used for T_t ~ temperature_exact(z_b, s_b, q_b).\n\n\n\n\n\n","category":"function"},{"location":"submodules/ctmlm/#ConceptualClimateModels.CloudToppedMixedLayerModel.entrainment_velocity","page":"Cloud Topped Mixed Layer Model","title":"ConceptualClimateModels.CloudToppedMixedLayerModel.entrainment_velocity","text":"entrainment_velocity(version = :Stevens2006; use_augmentation = true)\n\nReturn an equation for the entrainment velocity w_e. Versions are :Stevens2006, :Gesso2014, :LL96. Keyword use_augmentation adds the decoupling-based augmentation described in (Datseris, 2025).\n\n\n\n\n\n","category":"function"},{"location":"submodules/ctmlm/#ConceptualClimateModels.CloudToppedMixedLayerModel.q_liquid","page":"Cloud Topped Mixed Layer Model","title":"ConceptualClimateModels.CloudToppedMixedLayerModel.q_liquid","text":"q_liquid(T, q, z)\n\nliquid specific humidity given temperature total water specific humidity and height. 0.0 if below saturation.\n\n\n\n\n\n","category":"function"},{"location":"submodules/ctmlm/#ConceptualClimateModels.CloudToppedMixedLayerModel.q_saturation","page":"Cloud Topped Mixed Layer Model","title":"ConceptualClimateModels.CloudToppedMixedLayerModel.q_saturation","text":"q_saturation(T, z)\n\nSaturation specific humidity given temperature and height. Height is transformed to pressure via hydrostatic approximation.\n\n\n\n\n\n","category":"function"},{"location":"submodules/ctmlm/#ConceptualClimateModels.CloudToppedMixedLayerModel.pressure","page":"Cloud Topped Mixed Layer Model","title":"ConceptualClimateModels.CloudToppedMixedLayerModel.pressure","text":"pressure(z, T)\n\nUse hydrostatic balance and ideal gas law to get pressure at height z given temperature at height z. The equation is often called the \"Hypsometric equation\" with the factor (RdT/g) called the scale height. Note that normally using Rd requires usage of Tv (virtual temperature), defined as Tv = T(1 + 0.608*q) with q the specific humidity of water vapor. In the codebase we practically always approximate Tv by T.\n\n\n\n\n\n","category":"function"},{"location":"submodules/ctmlm/#ConceptualClimateModels.CloudToppedMixedLayerModel.sst_dynamic","page":"Cloud Topped Mixed Layer Model","title":"ConceptualClimateModels.CloudToppedMixedLayerModel.sst_dynamic","text":"Return τSST * d(SST)/dt = ASW - Lnet - LHF - SHF + SST_X .\n\n\n\n\n\n","category":"function"},{"location":"submodules/ctmlm/#Clouds-and-decoupling","page":"Cloud Topped Mixed Layer Model","title":"Clouds and decoupling","text":"","category":"section"},{"location":"submodules/ctmlm/","page":"Cloud Topped Mixed Layer Model","title":"Cloud Topped Mixed Layer Model","text":"CloudToppedMixedLayerModel.cf_dynamic\nCloudToppedMixedLayerModel.cloud_emission_temperature\nCloudToppedMixedLayerModel.cloud_emissivity\nCloudToppedMixedLayerModel.cloud_layer_thickness\nCloudToppedMixedLayerModel.decoupling_variable\nCloudToppedMixedLayerModel.decoupling_ratios","category":"page"},{"location":"submodules/ctmlm/#ConceptualClimateModels.CloudToppedMixedLayerModel.cf_dynamic","page":"Cloud Topped Mixed Layer Model","title":"ConceptualClimateModels.CloudToppedMixedLayerModel.cf_dynamic","text":"cf_dynamic()\n\nProvide the equations tau_C dCdt = C_mathcalD - C as well as the equation that defines C_mathcalD as a function of the decoupling variable mathcalD. The function uses the curve fitted to data in (Datseris, 2025).\n\n\n\n\n\n","category":"function"},{"location":"submodules/ctmlm/#ConceptualClimateModels.CloudToppedMixedLayerModel.cloud_emission_temperature","page":"Cloud Topped Mixed Layer Model","title":"ConceptualClimateModels.CloudToppedMixedLayerModel.cloud_emission_temperature","text":"cloud_emission_temperature(version = :mean)\n\nReturn a process for T_C. Versions are :top, :base, :mean.\n\n\n\n\n\n","category":"function"},{"location":"submodules/ctmlm/#ConceptualClimateModels.CloudToppedMixedLayerModel.cloud_emissivity","page":"Cloud Topped Mixed Layer Model","title":"ConceptualClimateModels.CloudToppedMixedLayerModel.cloud_emissivity","text":"cloud_emissivity(version = 1.0; fraction = true)\n\nProvide an equation for the effective emissivity of the cloud layer. Options for version:\n\n:clt: inspired by (Randall and Suarez, 1984), emissivity scales with the depth of the cloud layer.\n:liquid_water_path: Exponential of LWP.\n<: Number: emissiviy is just the provided number or symbolic expression.\n\nIf fraction = true the emissivity is further multiplied by the cloud fraction.\n\n\n\n\n\n","category":"function"},{"location":"submodules/ctmlm/#ConceptualClimateModels.CloudToppedMixedLayerModel.cloud_layer_thickness","page":"Cloud Topped Mixed Layer Model","title":"ConceptualClimateModels.CloudToppedMixedLayerModel.cloud_layer_thickness","text":"cloud_layer_thickness(version = :exact)\n\nProvide an equation for the relative/normalized cloud layer thickness CLT. The options for version are:\n\n:exact: exact estimation by figuring out when q_liquid first becomes positive. Computationally costly as it requires interpolations.\n:Bolton1980: Well known approximate expression by Bolton, 1980.\n\n\n\n\n\n","category":"function"},{"location":"submodules/ctmlm/#ConceptualClimateModels.CloudToppedMixedLayerModel.decoupling_variable","page":"Cloud Topped Mixed Layer Model","title":"ConceptualClimateModels.CloudToppedMixedLayerModel.decoupling_variable","text":"decoupling_variable(version = :Bretherton1997)\n\nReturn an equation for mathcalD, the decoupling variable.\n\n\n\n\n\n","category":"function"},{"location":"submodules/ctmlm/#ConceptualClimateModels.CloudToppedMixedLayerModel.decoupling_ratios","page":"Cloud Topped Mixed Layer Model","title":"ConceptualClimateModels.CloudToppedMixedLayerModel.decoupling_ratios","text":"decoupling_ratios()\n\nReturn equations for mathcald_q mathcald_s as in (Datseris, 2025).\n\n\n\n\n\n","category":"function"},{"location":"submodules/ctmlm/#Radiation","page":"Cloud Topped Mixed Layer Model","title":"Radiation","text":"","category":"section"},{"location":"submodules/ctmlm/","page":"Cloud Topped Mixed Layer Model","title":"Cloud Topped Mixed Layer Model","text":"CloudToppedMixedLayerModel.cloud_shortwave_warming\nCloudToppedMixedLayerModel.cloud_longwave_cooling\nCloudToppedMixedLayerModel.mlm_radiative_cooling\nCloudToppedMixedLayerModel.downwards_longwave_radiation\nCloudToppedMixedLayerModel.albedo\nCloudToppedMixedLayerModel.matsunobu_emissivity","category":"page"},{"location":"submodules/ctmlm/#ConceptualClimateModels.CloudToppedMixedLayerModel.cloud_shortwave_warming","page":"Cloud Topped Mixed Layer Model","title":"ConceptualClimateModels.CloudToppedMixedLayerModel.cloud_shortwave_warming","text":"cloud_shortwave_warming()\n\nProvide an equation for CTRC_sw which by default is 0.04*C*S.\n\n\n\n\n\n","category":"function"},{"location":"submodules/ctmlm/#ConceptualClimateModels.CloudToppedMixedLayerModel.cloud_longwave_cooling","page":"Cloud Topped Mixed Layer Model","title":"ConceptualClimateModels.CloudToppedMixedLayerModel.cloud_longwave_cooling","text":"cloud_longwave_cooling()\n\nProvide an equation for CTRC_lw.\n\n\n\n\n\n","category":"function"},{"location":"submodules/ctmlm/#ConceptualClimateModels.CloudToppedMixedLayerModel.mlm_radiative_cooling","page":"Cloud Topped Mixed Layer Model","title":"ConceptualClimateModels.CloudToppedMixedLayerModel.mlm_radiative_cooling","text":"mlm_radiative_cooling(version = :three_layer)\n\nProvide an equation for Delta F_s, the radiative cooling of the boundary layer (assumming Delta F_q = 0). Versions are: :three_layer, :ctrc, :Gesso2014 as in (Datseris, 2025).\n\n\n\n\n\n","category":"function"},{"location":"submodules/ctmlm/#ConceptualClimateModels.CloudToppedMixedLayerModel.downwards_longwave_radiation","page":"Cloud Topped Mixed Layer Model","title":"ConceptualClimateModels.CloudToppedMixedLayerModel.downwards_longwave_radiation","text":"downwards_longwave_radiation([version])\n\nProvide equation for L_d L_net, the incoming longwave radiation or the net longwave radiative cooling of the surface. See the source code for possible versions.\n\n\n\n\n\n","category":"function"},{"location":"submodules/ctmlm/#ConceptualClimateModels.CloudToppedMixedLayerModel.albedo","page":"Cloud Topped Mixed Layer Model","title":"ConceptualClimateModels.CloudToppedMixedLayerModel.albedo","text":"Return an equation for α the total albedo perceived by the surface.\n\n\n\n\n\n","category":"function"},{"location":"submodules/ctmlm/#ConceptualClimateModels.CloudToppedMixedLayerModel.matsunobu_emissivity","page":"Cloud Topped Mixed Layer Model","title":"ConceptualClimateModels.CloudToppedMixedLayerModel.matsunobu_emissivity","text":"matsunobu_emissivity(RH, T, H = 0)\n\nReturn emissivity at given relative humidity and temperature as defined by (Matsunobu and Coimbra, 2024).\n\n\n\n\n\n","category":"function"},{"location":"submodules/ctmlm/#Free-troposphere","page":"Cloud Topped Mixed Layer Model","title":"Free troposphere","text":"","category":"section"},{"location":"submodules/ctmlm/","page":"Cloud Topped Mixed Layer Model","title":"Cloud Topped Mixed Layer Model","text":"CloudToppedMixedLayerModel.free_troposphere_emission_temperature\nCloudToppedMixedLayerModel.mlm_s₊\nCloudToppedMixedLayerModel.mlm_q₊","category":"page"},{"location":"submodules/ctmlm/#ConceptualClimateModels.CloudToppedMixedLayerModel.free_troposphere_emission_temperature","page":"Cloud Topped Mixed Layer Model","title":"ConceptualClimateModels.CloudToppedMixedLayerModel.free_troposphere_emission_temperature","text":"free_troposphere_emission_temperature(γ = 1.0; add_co2 = true)\n\nReturn an equation for T_FTR. γ is as in (Datseris, 2025). add_co2 will add an additional warming term ECS_CO2*log2(CO2/400).\n\n\n\n\n\n","category":"function"},{"location":"submodules/ctmlm/#ConceptualClimateModels.CloudToppedMixedLayerModel.mlm_s₊","page":"Cloud Topped Mixed Layer Model","title":"ConceptualClimateModels.CloudToppedMixedLayerModel.mlm_s₊","text":"mlm_s₊(\n    version = :difference;\n    cloud_effect = false,\n    CO2_effect = false,\n)\n\nProvide equation for s_+. To do this, a boundary condition must be provided that is a fixed parameter. version argument decides this:\n\n:difference: the starting temperature difference across inversion is a fixed parameter.\n:temperature: the starting temperature after the inversion is a fixed parameter.\n:static_energy: the starting moist static energy after the inversion is a fixed parameter.\n\nBesides these, we can also specify whether CO2 increase also increases temperature difference, and whether decreasing C decreases temperature difference due to cloud thinning as in (Singer and Schneider, apr 2023).\n\n\n\n\n\n","category":"function"},{"location":"submodules/ctmlm/#ConceptualClimateModels.CloudToppedMixedLayerModel.mlm_q₊","page":"Cloud Topped Mixed Layer Model","title":"ConceptualClimateModels.CloudToppedMixedLayerModel.mlm_q₊","text":"mlm_q₊(version = :relative)\n\nProvide equation for q_+. If version = :relative then make free tropospheric relative humidity a free parameter. Else if version = :constant then make q_+ itself a parameter.\n\n\n\n\n\n","category":"function"},{"location":"submodules/ctmlm/#Default-processes","page":"Cloud Topped Mixed Layer Model","title":"Default processes","text":"","category":"section"},{"location":"submodules/ctmlm/","page":"Cloud Topped Mixed Layer Model","title":"Cloud Topped Mixed Layer Model","text":"using ConceptualClimateModels\nimport ConceptualClimateModels.CloudToppedMixedLayerModel as CTMLM\ndefault_processes_eqs(CTMLM)","category":"page"}]
}
