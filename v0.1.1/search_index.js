var documenterSearchIndex = {"docs":
[{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"Barker, J. R. and Ross, M. H. (1999). An introduction to global warming. American Journal of Physics 67, 1216–1226.\n\n\n\nBastiaansen, R.; Ashwin, P. and von der Heydt, A. S. (2023). Climate response and sensitivity: time scales and late tipping points. Proceedings of the Royal Society A: Mathematical, Physical and Engineering Sciences 479, arXiv:2207.06110.\n\n\n\nBender, F. A.; Engström, A.; Wood, R. and Charlson, R. J. (2017). Evaluation of hemispheric asymmetries in marine cloud radiative properties. Journal of Climate 30, 4131–4147.\n\n\n\nBerger, A. (1978). Long-term variations of daily insolation and Quaternary climatic                changes. J. Atmos. Sci. 35, 2362–2367.\n\n\n\nBudyko, M. I. (1969). The effect of solar radiation variations on the climate of the Earth. Tellus 21, 611–619.\n\n\n\nCess, R. D. (1976). Climate change: An appraisal of atmospheric feedback mechanisms                employing zonal climatology. J. Atmos. Sci. 33, 1831–1843.\n\n\n\nDatseris, G. and Parlitz, U. (2022). Nonlinear dynamics. 1 Edition, Undergraduate Lecture Notes in Physics (Springer Nature, Cham, Switzerland).\n\n\n\nDatseris, G. and Stevens, B. (2021). Earth's Albedo and Its Symmetry. AGU Advances 2.\n\n\n\nEngström, A.; Bender, F. A.; Charlson, R. J. and Wood, R. (2015). The nonlinear relationship between albedo and cloud fraction on near-global, monthly mean scale in observations and in the CMIP5 model ensemble. Geophysical Research Letters 42, 9571–9578.\n\n\n\nEtminan, M.; Myhre, G.; Highwood, E. J. and Shine, K. P. (2016). Radiative forcing of carbon dioxide, methane, and nitrous oxide: A significant revision of the methane radiative forcing. Geophysical Research Letters 43, 12,614-12,623, arXiv:https://agupubs.onlinelibrary.wiley.com/doi/pdf/10.1002/2016GL071930.\n\n\n\nGaskell, D. E.; Huber, M.; O'Brien, C. L.; Inglis, G. N.; Acosta, R. P.; Poulsen, C. J. and Hull, P. M. (2022). The latitudinal temperature gradient and its climate dependence                as inferred from foraminiferal delta18O over the past 95                million years. Proc. Natl. Acad. Sci. U. S. A. 119, e2111332119.\n\n\n\nGhil, M. (1981). Energy-Balance Models: An Introduction. In: Climatic Variations and Variability: Facts and Theories (Springer Netherlands, Dordrecht); pp. 461–480.\n\n\n\nKoll, D. D. and Cronin, T. W. (2018). Earth's outgoing longwave radiation linear due to H 2 O greenhouse effect. Proceedings of the National Academy of Sciences 115, 10293–10298.\n\n\n\nLohmann, J.; Castellana, D.; Ditlevsen, P. D. and Dijkstra, H. A. (2021). Abrupt climate change as a rate-dependent cascading tipping                point. Earth Syst. Dyn. 12, 819–835.\n\n\n\nNorth, G. R.; Cahalan, R. F. and Coakley, J. A. (1981). Energy balance climate models. Reviews of Geophysics 19, 91.\n\n\n\nOsman, M. B.; Tierney, J. E.; Zhu, J.; Tardif, R.; Hakim, G. J.; King, J. and Poulsen, C. J. (2021). Globally resolved surface temperatures since the Last Glacial                Maximum. Nature 599, 239–244.\n\n\n\nde Saedeleer, B.; Crucifix, M. and Wieczorek, S. (2013). Is the astronomical forcing a reliable and unique pacemaker for climate? A conceptual model study. Climate Dynamics 40, 273–294, arXiv:1109.6214.\n\n\n\nSellers, W. D. (1969). A Global Climatic Model Based on the Energy Balance of the Earth-Atmosphere System. Journal of Applied Meteorology 8, 392–400.\n\n\n\nStommel, H. (1961). Thermohaline convection with two stable regimes of flow. Tellus 13, 224–230.\n\n\n\nSödergren, A. H.; McDonald, A. J. and Bodeker, G. E. (2018). An energy balance model exploration of the impacts of interactions between surface albedo, cloud cover and water vapor on polar amplification. Climate Dynamics 51, 1639–1658.\n\n\n\nWikipedia contributors (2023). Tetens equation — Wikipedia, The Free Encyclopedia. [Online; accessed 6-February-2024].\n\n\n\n","category":"page"},{"location":"examples/#examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"In this page we go through various examples of combining processes to make models that have been already used in the literature, or using DynamicalSystems.jl or other packages to analyse conceptual climate models.","category":"page"},{"location":"examples/#Classic-Snowball-Earth-hysteresis","page":"Examples","title":"Classic Snowball Earth hysteresis","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The origins of energy balance models ((Sellers, 1969; Budyko, 1969; Ghil, 1981; North et al., 1981)) examined the impact of variations in insolation on the global climate. In particular, they studied how simple energy balance models with only ice-albedo and water vapor feedbacks yielded bi-stable hysteresis between a cold \"snowball\" state and a warm Earth, as the solar constant was varied. The same kind of behaviour is also used in (Datseris and Parlitz, 2022; Ch. 2) as an introductory example to dynamical systems.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We can easily replicate such a model by creating a global-mean temperature model without even having the water vapor feedback. We will combine the processes:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using ConceptualClimateModels\nusing ConceptualClimateModels.CCMV\n\nbudyko_processes = [\n    BasicRadiationBalance(),\n    EmissivityStefanBoltzmanOLR(),\n    IceAlbedoFeedback(; min = 0.3, max = 0.7),\n    α ~ α_ice,\n    ParameterProcess(ε), # emissivity is a parameter\n    f ~ 0, # no external forcing\n    # absorbed solar radiation has a default process\n]\n\nbudyko = processes_to_coupledodes(budyko_processes)\nprintln(dynamical_system_summary(budyko))","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"We can perform a typical hysteresis loop analysis straightforwardly by doing a continuation analysis with the Attractors.jl subpackage of DynamicalSystems.jl.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"For setting up the continuation we leverage the integration with DynamicalSystems.jl:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using DynamicalSystems\n\ngrid = physically_plausible_grid(budyko)\nmapper = AttractorsViaRecurrences(budyko, grid)\nrfam = RecurrencesFindAndMatch(mapper)\nsampler = physically_plausible_ic_sampler(budyko)\nsampler() # randomly sample initial conditions","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Now, to obtain the symbolic parameter index corresponding to the insolation parameter, there are several ways as described in the main tutorial. The simplest way is","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"index = :ε_0","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Now we perform the continuation versus the effective emissivity, to approximate increasing or decreasing the strength of the greenhouse effect:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"εrange = 0.3:0.01:0.8\nfractions_curves, attractors_info = continuation(\n    rfam, εrange, index, sampler;\n    samples_per_parameter = 1000,\n    show_progress = false,\n)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"and visualize it","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using CairoMakie\na2r = A -> first(first(A)) # plot attractor: extract first point and first dimension of point\nplot_basins_attractors_curves(fractions_curves, attractors_info, a2r, εrange)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"we see there are two attractors at low and high temperatures and that they have approximately the same basin fractions of 50% each.","category":"page"},{"location":"examples/#Rate-dependent-tipping-in-the-Stommel-model","page":"Examples","title":"Rate dependent tipping in the Stommel model","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The Stommel model is a good example for rate dependent tipping (Lohmann et al., 2021). We can modify the process ΔTStommelModel and make its parameter η3 be a time- dependent variable instead, like so:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using ConceptualClimateModels\nusing ConceptualClimateModels.CCMV\n\n@variables η1(t)\n@parameters η1_0 = 2.0 # starting value for η1 parameter\n@parameters r_η = 0.0  # the rate that η1 changes\n\nprocesses = [\n    ΔTStommelModel(; η1 = η1), # replace keyword with a symbolic variable\n    η1 ~ η1_0 + r_η*t, # this symbolic variable has its own equation!\n]\n\nstommel = processes_to_coupledodes(processes)\nprintln(dynamical_system_summary(stommel))","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"At the moment r_η = 0 and the system is autonomous. Hence, we can easily estimate its bifurcation diagram using the same steps as the above example.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using DynamicalSystems\n\ngrid = physically_plausible_grid(stommel)\nmapper = AttractorsViaRecurrences(stommel, grid;\n    consecutive_recurrences = 1000, attractor_locate_steps = 10,\n)\nrfam = RecurrencesFindAndMatch(mapper)\nsampler = physically_plausible_ic_sampler(stommel)\n\nηrange = 2.0:0.01:4.0\nfractions_curves, attractors_info = continuation(\n    rfam, ηrange, η1_0, sampler;\n    samples_per_parameter = 1000,\n    show_progress = false,\n)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"and visualize it","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"using CairoMakie\na2r = A -> first(first(A)) # plot attractor: extract first point and first dimension of point\nfig = plot_attractors_curves(attractors_info, a2r, ηrange)\nax = content(fig[1,1])\nax.ylabel = \"ΔT - fixed points\"\nax.xlabel = \"parameter η1\"\nfig","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Alright, now we can perform simple simulations where we evolve the system forwards in time while η_1 increases at different rates. We can use the trajectory function to evolve it and due to the nice integration between DynamicalSystems.jl and ModelingToolkit.jl we can use any \"observable\" of the system for the trajectory output.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"r1, r2 = 0.02, 0.2\nu0 = [1.61334  1.85301] # always start from same state\nset_parameter!(stommel, η1_0, 2.0) # set it to initial value\n\nfor (j, r) in enumerate((r1, r2))\n    # update the named parameter `r_η` to the numeric value `r`\n    set_parameter!(stommel, r_η, r)\n    # simulate until η1 becomes 4\n    tfinal = (4.0 - default_value(η1_0))/r\n    # trajectory: first column = ΔΤ, second column = η1\n    X, tvec = trajectory(stommel, tfinal, u0; save_idxs = [ΔT, η1])\n    lines!(ax, X[:, 2], X[:, 1]; color = Cycled(j+2), label = \"r_η = $(r)\")\nend\naxislegend(ax; unique = true, position = :lt)\nylims!(ax, 1, 4)\nfig","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"As you can see from the figure, depending on the rate the system either \"tracks\" the fixed point of high ΔΤ or it collapses down to the small ΔT branch. This happens because the system crosses the unstable manifold of the lower branch (Datseris and Parlitz, 2022; Chap. 12). To visualize the unstable manifold we could use BifurcationKit.jl, however, it is very inconvenient to do so, because BifurcationKit.jl does not provide most of the conveniences that DynamicalSystems.jl does. For example, it does not integrate well enough with DifferentialEquations.jl (to allow passing ODEProblem which is created by DynamicalSystem). It also does not allow indexing parameters by their symbolic bindings. Lastly, it does not work with models generated with ModelingToolkit.jl so we would have to re-write all the equations that the chosen processes made for us.","category":"page"},{"location":"examples/#Glacial-oscillations","page":"Examples","title":"Glacial oscillations","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Coming soon!","category":"page"},{"location":"processes/#predefined_processes","page":"Predefined processes","title":"Predefined processes","text":"","category":"section"},{"location":"processes/","page":"Predefined processes","title":"Predefined processes","text":"Predefined processes are provided in this page. Those extracted by the literature cite their according resource. Note that by default all processes utilize the globally-exported predefined variables of ConceptualClimateModels.jl.","category":"page"},{"location":"processes/#Temperature","page":"Predefined processes","title":"Temperature","text":"","category":"section"},{"location":"processes/","page":"Predefined processes","title":"Predefined processes","text":"BasicRadiationBalance","category":"page"},{"location":"processes/#ConceptualClimateModels.BasicRadiationBalance","page":"Predefined processes","title":"ConceptualClimateModels.BasicRadiationBalance","text":"BasicRadiationBalance(; T, f, ASR, OLR, c_T = 5e8)\n\nCreate the equation\n\nc_T fracdTdt = ASR - OLR + f\n\nrepresenting the most basic radiative energy balance at the top of the atmosphere setting a global mean temperature, see e.g., any introductory article (North et al., 1981; Ghil, 1981). ASR is the absorbed solar radiation, which defaults to S*(1 - α) in the default processes. S is the received insolation, by default equal to solar_constant, but could e.g., be any astronomical forcing such as AstronomicalForcingDeSaedeleer. α is the albedo and f any additional forcing such as CO2Forcing. OLR defaults to A + B*T. c_T is the heat capacity of the system in J/K/m². However, for convenience, the parameter added to the final equation is τ_T which is the timescale in seconds, i.e., c_T/solar_constant.\n\n\n\n\n\n","category":"type"},{"location":"processes/#Temperature-difference","page":"Predefined processes","title":"Temperature difference","text":"","category":"section"},{"location":"processes/","page":"Predefined processes","title":"Predefined processes","text":"ΔTLinearRelaxation\nΔTStommelModel","category":"page"},{"location":"processes/#ConceptualClimateModels.ΔTLinearRelaxation","page":"Predefined processes","title":"ConceptualClimateModels.ΔTLinearRelaxation","text":"ΔTLinearRelaxation(; ΔT, T, τ = 5e6, A = 36.53, B = 0.658)\n\nCreate the equation\n\ntau_Delta TfracDelta Tdt = Delta T_ref(T) - Delta T\n\nwhich exponentially relaxes the equator-to-pole temperature difference ΔT to its reference value Delta T_ref(T) = A - B*(T - 27515), i.e., it decreases linearly with global mean temperature T (in Kelvin). The default values for A, B are obtained from Equation (2) of (Gaskell et al., 2022). We also fitted paleoclimate data of (Osman et al., 2021) and found very similar results, A = 35.8, B = -1.11 for north hemisphere and A = 27.4, b = -0.513 for south.\n\nHere ΔT is defined as the temperature difference between average temperatures at (0, 30) and (60, 90) latitudes. The timescale is taken as 2 months, although if τ = 0 is given, the equation Delta T  Delta T_ref(T) is created instead.\n\n\n\n\n\n","category":"function"},{"location":"processes/#ConceptualClimateModels.ΔTStommelModel","page":"Predefined processes","title":"ConceptualClimateModels.ΔTStommelModel","text":"ΔTStommelModel(; ΔT=ΔT, ΔS=ΔS, η1 = 2, η2 = 1, η3 = 0.3)\n\nCreate the equations\n\ndotDelta T = eta_1 - Delta T - Delta T - Delta S Delta T\ndotDelta S = eta_2 - eta_3Delta S - Delta T - Delta S Delta S\n\nwhich are the two equations of the Stommel box model for Atlantic thermohaline circulation (Stommel, 1961), here presented in nondimensionalized form (Lohmann et al., 2021), so that temperature and sality are normalized by their coefficients a_T a_S relating them to the density of water\n\nrho = rho_0 1 - a_T(T - T_0) + a_S(S-S_0)\n\nfor some reference values.\n\n\n\n\n\n","category":"function"},{"location":"processes/#Longwave-radiation","page":"Predefined processes","title":"Longwave radiation","text":"","category":"section"},{"location":"processes/","page":"Predefined processes","title":"Predefined processes","text":"LinearOLR\nLinearClearSkyOLR\nEmissivityStefanBoltzmanOLR\nEmissivityFeedbackTanh\nEmissivitySellers1969\nSoedergrenClearSkyEmissivity","category":"page"},{"location":"processes/#ConceptualClimateModels.LinearOLR","page":"Predefined processes","title":"ConceptualClimateModels.LinearOLR","text":"LinearOLR(; OLR, T, A = -277.0, B = 1.8)\n\nCreate the equation OLR ~ A + B*T. This is a linearized outgoing longwave radiation (OLR), and is the same equation as (7) of (North et al., 1981): OLR = A + BT with T temperature in Kelvin and A B constants. However, default A B are fitted from current CERES all sky OLR and using ERA5 data for the 2-meter temperature. We assume T in Kelvin. This linear approximation is quite accurate for temporally averaged data T in (220 280) however drops drastically in accuracy after that due to the nonlinear effects of clouds (as evident by observational data).\n\n(Koll and Cronin, 2018) provide a \"proof\" of the linearity of the clear sky OLR due to spectral properties of water vapor.\n\nWe note a big difference between current CERES data and the values reported in (North et al., 1981): here A=214.67 (assuming T in Celcius) and B=1.8 versus the values A=203.3 and B=2.09 in (North et al., 1981).\n\nIf instead of all sky, if we fit the clear sky CERES data, we get A = -326.0, B = 2.09. Interestingly, coefficient B here is the same as that reported by (North et al., 1981), but A=244.88 (assuming T in Celcius) is not.\n\n\n\n\n\n","category":"function"},{"location":"processes/#ConceptualClimateModels.LinearClearSkyOLR","page":"Predefined processes","title":"ConceptualClimateModels.LinearClearSkyOLR","text":"LinearClearSkyOLR(; kw...)\n\nEquivalent with LinearOLR(; A = A = -326.0, B = 2.09, kw...) and provided as a convenience for the clear sky fit to CERES data.\n\n\n\n\n\n","category":"function"},{"location":"processes/#ConceptualClimateModels.EmissivityStefanBoltzmanOLR","page":"Predefined processes","title":"ConceptualClimateModels.EmissivityStefanBoltzmanOLR","text":"EmissivityStefanBoltzmanOLR(; ε, T)\n\nCreate the equation OLR ~ ε*σ*T^4 where σ is the Stefan Boltzmann constant and ε the effective emissivity, also known as the \"grayness\" of the system, or the deviation it has from being a perfect black body (Ghil, 1981). ε then needs to be parameterized itself to include greenhouse or other climate effects.\n\n\n\n\n\n","category":"function"},{"location":"processes/#ConceptualClimateModels.EmissivityFeedbackTanh","page":"Predefined processes","title":"ConceptualClimateModels.EmissivityFeedbackTanh","text":"EmissivityFeedbackTanh(; ε, Τ, left = 0.5, right = 0.4, rate = 0.5, Tref = 288.0)\n\nCreate an equation that assigns emissivity ε to hyperbolic tangent of temperature T. This is an ad-hoc feedback  that was used in (Bastiaansen et al., 2023), similar to EmissivitySellers1969. In essence this is a TanhProcess with the given keywords as parameters.\n\n\n\n\n\n","category":"function"},{"location":"processes/#ConceptualClimateModels.EmissivitySellers1969","page":"Predefined processes","title":"ConceptualClimateModels.EmissivitySellers1969","text":"EmissivitySellers1969(; ε, T, m = 0.5)\n\nCreate the equation ε ~ 1 - m*tanh(19*T^6*1e-16), which was used originally in (Sellers, 1969) to represent the effect of \"water vapor, carbon dioxide, dust and clouds on terrestrial radiation\".\n\n\n\n\n\n","category":"function"},{"location":"processes/#ConceptualClimateModels.SoedergrenClearSkyEmissivity","page":"Predefined processes","title":"ConceptualClimateModels.SoedergrenClearSkyEmissivity","text":"SoedergrenClearSkyEmissivity(; ε, T, CO2, RH = 0.8, H_H20 = 2.0)\n\nCreate Eq. 10 of (Södergren et al., 2018), which is the same as Eq. 21 of (Barker and Ross, 1999) for the effective emissivity of clear sky atmosphere:\n\nvarepsilon = 1 - exp(0082 - (238*01*e_s*RH*H_H2O + 403*CO2*1e-6)^0294)\n\nwith e_s the saturation_vapor_pressure. The equation assumes CO2 concentration is in ppm and vapor pressure in kPa hence the conversion factors 0.1 and 1e-6.\n\nwarn: Physically wrong equation\nBe advised: this process is included for reference only. It should not be used because it is physically wrong. Emissivity increases with temperature, while it should decrease: higher temperature → stronger greenhouse effect → smaller effective emissivity required for higher temperature to have the same OLR as per the basic equation OLR = ε σ Τ^4.\n\n\n\n\n\n","category":"function"},{"location":"processes/#Shortwave-radiation","page":"Predefined processes","title":"Shortwave radiation","text":"","category":"section"},{"location":"processes/","page":"Predefined processes","title":"Predefined processes","text":"DirectAlbedoAddition\nCoAlbedoProduct\nSeparatedClearAllSkyAlbedo","category":"page"},{"location":"processes/#ConceptualClimateModels.DirectAlbedoAddition","page":"Predefined processes","title":"ConceptualClimateModels.DirectAlbedoAddition","text":"DirectAlbedoAddition(; α, α_bg = 0.1, other_albedo_variables = (α_ice, α_clouds))\n\nCreate the equation α ~ α_bg + other_albedo_variables..., meaning that planetary albedo α is a direct sum of all specified albedos.\n\n\n\n\n\n","category":"type"},{"location":"processes/#ConceptualClimateModels.CoAlbedoProduct","page":"Predefined processes","title":"ConceptualClimateModels.CoAlbedoProduct","text":"CoAlbedoProduct(; α, albedo_variables = (α_ice, α_cloud))\n\nCreate the equation 1 - α ~ prod(a -> (1 - a), albedo_variables) meaning that the co-albedo is the product of the co-albedos of all albedo variables. This would be e.g., the planetary albedo if all components were uniform layers, while the bottom-most layer (surface) had perfect absorption and all other layers had 0 absorption and finite reflection.\n\n\n\n\n\n","category":"type"},{"location":"processes/#ConceptualClimateModels.SeparatedClearAllSkyAlbedo","page":"Predefined processes","title":"ConceptualClimateModels.SeparatedClearAllSkyAlbedo","text":"SeparatedClearAllSkyAlbedo(; α, α_cloud, C, α_clr = 0.15)\n\nCreate the equation α ~ α_cloud*C + α_clr*(1 - C).\n\n(Bender et al., 2017) argue that one can assume a separation between clear-sky and cloud albedo, so that α = α_cloud*C + α_clr*(1 - C) with C the cloud fraction and α_clr the clear sky albedo. They further cite (Cess, 1976) to facilitate the claim Additionally, Eq. (20) of (Barker and Ross, 1999) provides an identical expression.\n\nIn most cases you want to provide a variable with its own process for α_clr.\n\n\n\n\n\n","category":"function"},{"location":"processes/#Ice/snow","page":"Predefined processes","title":"Ice/snow","text":"","category":"section"},{"location":"processes/","page":"Predefined processes","title":"Predefined processes","text":"IceAlbedoFeedback","category":"page"},{"location":"processes/#ConceptualClimateModels.IceAlbedoFeedback","page":"Predefined processes","title":"ConceptualClimateModels.IceAlbedoFeedback","text":"IceAlbedoFeedback(; T, α_ice,\n    max = 0.45, min = 0.1, Tscale = 10, Tfreeze = 275.15, τ = 0\n)\n\nCreate an equation that assigns ice albedo α_ice to a hyperbolic tangent of temperature T. This represents an approximately linear decrease with T, as ice melts over part of the earth, while it is constant for all T for which the earth would be either entirely ice covered (T < Tfreeze - scale) or ice free (T > Tfreeze).\n\nIn essence this is a TanhProcess with the given keywords as parameters with reference temperature Tref = Tfreeze - scale/2.\n\nThis albedo is the most common used large-scale feedback in energy balance models, e.g., (Ghil, 1981), although it is typically taken as a piece-wise linear function. There is little change with using a hyperbolic tangent instead, while the tanh offers a differentiable flow.\n\nThe timescale τ if not zero will make an ExpRelaxation process relaxing to the hyperbolic tangent.\n\n\n\n\n\n","category":"type"},{"location":"processes/#Water-vapor","page":"Predefined processes","title":"Water vapor","text":"","category":"section"},{"location":"processes/","page":"Predefined processes","title":"Predefined processes","text":"saturation_vapor_pressure","category":"page"},{"location":"processes/#ConceptualClimateModels.saturation_vapor_pressure","page":"Predefined processes","title":"ConceptualClimateModels.saturation_vapor_pressure","text":"saturation_vapor_pressure(T)\n\nGiven surface temperature (in K) return saturation pressure for water vapor (in kPa) using the Tetens-Murray formula from (Wikipedia contributors, 2023), which is A*exp(B*T/(C+T)). Different formula is used for when T is less than the freezing point.\n\n\n\n\n\n","category":"function"},{"location":"processes/#Insolation","page":"Predefined processes","title":"Insolation","text":"","category":"section"},{"location":"processes/","page":"Predefined processes","title":"Predefined processes","text":"AstronomicalForcingDeSaedeleer","category":"page"},{"location":"processes/#ConceptualClimateModels.AstronomicalForcingDeSaedeleer","page":"Predefined processes","title":"ConceptualClimateModels.AstronomicalForcingDeSaedeleer","text":"AstronomicalForcingDeSaedeleer(; S = S, extensive = false)\n\nCreate the equation S ~ astronomical_forcing_desaedeleer(t, extensive) which is Eq. (1) of (de Saedeleer et al., 2013):\n\nS = \\sum_i s_i \\sin(\\omega_i t) + c_i \\cos(\\omega_i t)\n\nwhere the values of omega_i s_i c_i come from (Berger, 1978) who performed a spectral expansion of the insolation. The validity range of this approximation is [-1, 0] Myr.\n\nIn the summation i goes up to 35 if extensive, otherwise up to 8. The components are sorted according to magnitude of the spectral line, so the default version has only the 8 most important spectra lines.\n\nNote that in contrast to Eq. (1) of (de Saedeleer et al., 2013) we do not normalize f and its value is in W/m² (the mean value is still deducted). Additionally, the values of omega_i have been adjusted to expect time in units of seconds.\n\n\n\n\n\n","category":"function"},{"location":"processes/#Forcings","page":"Predefined processes","title":"Forcings","text":"","category":"section"},{"location":"processes/","page":"Predefined processes","title":"Predefined processes","text":"CO2Forcing","category":"page"},{"location":"processes/#ConceptualClimateModels.CO2Forcing","page":"Predefined processes","title":"ConceptualClimateModels.CO2Forcing","text":"CO2Forcing(; f, CO2, CO2f = 3.7)\n\nCreate the equation f  CO2f log_2(CO2400) which describes the forcing added to the TOA energy balance due to CO2 concentrations, assumming the OLR expression is calibrated for 0 added forcing at 400 ppm which is the default for OLR expressions provided by ConceptualClimateModels.jl.\n\nThe default value of f comes from Eq. (3.2) of (Bastiaansen et al., 2023) which cites IPCC-5, while (Etminan et al., 2016) report practically the same value assuming a constant f (note here the log is base 2). In reality f depends on CO2 and other greenhouse gases concentrations due to spectral overlaps, see (Etminan et al., 2016) Sec. 4.\n\n\n\n\n\n","category":"type"},{"location":"processes/#Clouds","page":"Predefined processes","title":"Clouds","text":"","category":"section"},{"location":"processes/","page":"Predefined processes","title":"Predefined processes","text":"CloudAlbedoExponential\nCloudAlbedoLinear\nBudykoOLR","category":"page"},{"location":"processes/#ConceptualClimateModels.CloudAlbedoExponential","page":"Predefined processes","title":"ConceptualClimateModels.CloudAlbedoExponential","text":"CloudAlbedoExponential(\n    α_cloud, C, a = 2.499219232848238, b = 17.596369331717433\n)\n\nCreate the equation α_cloud ~ sinh(a*C)/b relating cloud albedo to cloud fraction C. This equation is exponential and not linear, as in observations. (Engström et al., 2015) (and also (Bender et al., 2017)) discuss this exponential relation in detail, and provide as explanation that cloud effective albedo increases with latitude (due to solar zenith changes) while cloud fraction also increases with latitude.\n\nNote that here however we modify the equation α_cloud ~ exp(a*C - b) of (Engström et al., 2015) to utilize the hyperbolic sine, so that α_cloud = 0 when C = 0 as is physically necessary. Then, a, b are extracted by fitting CERES data, using as α_cloud the energetically consistent cloud albedo as defined by (Datseris and Stevens, 2021), further yearly averaged and within latitudes (-60, 60) as in (Bender et al., 2017). This albedo can be directly added to the clear sky albedo to produce the planetary albedo.\n\n\n\n\n\n","category":"function"},{"location":"processes/#ConceptualClimateModels.CloudAlbedoLinear","page":"Predefined processes","title":"ConceptualClimateModels.CloudAlbedoLinear","text":"CloudAlbedoLinear(; α_cloud, C, a = 0.2252861764703435)\n\nSame as in CloudAlbedoExponential, but now the linear form α_cloud ~ a*C is returned, with a fitted from CERES data in the same way.\n\n\n\n\n\n","category":"function"},{"location":"processes/#ConceptualClimateModels.BudykoOLR","page":"Predefined processes","title":"ConceptualClimateModels.BudykoOLR","text":"BudykoOLR(; OLR=OLR, T=T, C=C,\n    BudykoOLR_A = -461.8068, BudykoOLR_B = 2.58978,\n    BudykoOLR_Ac = -377.22741, BudykoOLR_Bc = 1.536171\n)\n\nCreate the equation OLR ~ A + B*T - C*(Ac + Bc*T) for the dependence of OLR on both temperature and cloud fraction (in 0-1). This is the same as Eq. (1) of (Budyko, 1969). However, here T is expected in Kelvin, and the coefficients have been extracted by fitting into CERES data in the same way as in LinearOLR.\n\n\n\n\n\n","category":"function"},{"location":"processes/#generic_processes","page":"Predefined processes","title":"Generic processes","text":"","category":"section"},{"location":"processes/","page":"Predefined processes","title":"Predefined processes","text":"Processes that do not depend on any particular physical concept and instead provide a simple way to create new processes for a given climate variable:","category":"page"},{"location":"processes/","page":"Predefined processes","title":"Predefined processes","text":"ParameterProcess\nTimeDerivative\nExpRelaxation\nTanhProcess","category":"page"},{"location":"processes/#ProcessBasedModelling.ParameterProcess","page":"Predefined processes","title":"ProcessBasedModelling.ParameterProcess","text":"ParameterProcess(variable, value = default_value(variable)) <: Process\n\nThe simplest process which equates a given variable to a constant value that is encapsulated in a parameter. If value isa Real, then a named parameter with the name of variable and _0 appended is created. Else, if valua isa Num then it is taken as the paremeter directly.\n\nExample:\n\n@variables T(t) = 0.5\nproc = ParameterProcess(T)\n\nwill create the equation T ~ T_0, where T_0 is a @parameter with default value 0.5.\n\n\n\n\n\n","category":"type"},{"location":"processes/#ProcessBasedModelling.TimeDerivative","page":"Predefined processes","title":"ProcessBasedModelling.TimeDerivative","text":"TimeDerivative(variable, expression [, τ])\n\nThe second simplest process that equates the time derivative of the variable to the given expression while providing some conveniences over manually constructing an Equation.\n\nIt creates the equation τ_$(variable) Differential(t)(variable) ~ expression by constructing a new @parameter with default value τ (if τ is already a @parameter, it is used as-is). If τ is not given, then 1 is used at its place and no parameter is created.\n\nNote that if iszero(τ), then the process variable ~ expression is created.\n\n\n\n\n\n","category":"type"},{"location":"processes/#ProcessBasedModelling.ExpRelaxation","page":"Predefined processes","title":"ProcessBasedModelling.ExpRelaxation","text":"ExpRelaxation(variable, expression [, τ]) <: Process\n\nA common process for creating an exponential relaxation of variable towards the given expression, with timescale τ. It creates the equation:\n\nτn*Differential(t)(variable) ~ expression - variable\n\nWhere τn is a new named @parameter with the value of τ and name τ_($(variable)). If instead τ is nothing, then 1 is used in its place (this is the default behavior). If iszero(τ), then the equation variable ~ expression is created instead.\n\nThe convenience function\n\nExpRelaxation(process, τ)\n\nallows converting an existing process (or equation) into an exponential relaxation by using the rhs(process) as the expression in the equation above.\n\n\n\n\n\n","category":"type"},{"location":"processes/#ConceptualClimateModels.TanhProcess","page":"Predefined processes","title":"ConceptualClimateModels.TanhProcess","text":"TanhProcess(variable, driver, left, right, scale, reference) <: Process\nTanhProcess(variable, driver; left, right, scale, reference) <: Process\n\nA common process for when a variable has a tanh-dependence on a driver variable. The rest of the input arguments should be real numbers or @parameter named parameters.\n\nThe process creates the expression:\n\nvariable ~ left + (right - left)*(1 + tanh(2(driver - reference)/scale))*0.5\n\ni.e., a tanh formula that goes from value left to value right as a function of driver over a range of scale being centered at reference.\n\nIf the values given to the parameters of the expression are real numbers, they become named parameters prefixed with the name of variable, then the name of the driver, and then _tanh_left, _tanh_right, _tanh_rate and _tanh_ref respectively. Use LiteralParameter for parameters you do not wish to rename.\n\n\n\n\n\n","category":"type"},{"location":"processes/#default_processes","page":"Predefined processes","title":"Default processes","text":"","category":"section"},{"location":"processes/","page":"Predefined processes","title":"Predefined processes","text":"The list of default processes that are used by default in processes_to_coupledodes if one does not explicitly provide a list of default processes are:","category":"page"},{"location":"processes/","page":"Predefined processes","title":"Predefined processes","text":"using ConceptualClimateModels\nstruct ShowFile\n    file::String\nend\nfunction Base.show(io::IO, ::MIME\"text/plain\", f::ShowFile)\n    write(io, read(f.file))\nend","category":"page"},{"location":"processes/","page":"Predefined processes","title":"Predefined processes","text":"ShowFile(joinpath(dirname(pathof(ConceptualClimateModels)), \"default.jl\")) # hide","category":"page"},{"location":"#ConceptualClimateModels.jl","page":"Introduction","title":"ConceptualClimateModels.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"ConceptualClimateModels","category":"page"},{"location":"#ConceptualClimateModels","page":"Introduction","title":"ConceptualClimateModels","text":"ConceptualClimateModels.jl\n\n(Image: docsdev) (Image: docsstable) (Image: CI) (Image: codecov) (Image: Package Downloads)\n\nConceptualClimateModels.jl is a Julia package for creating and analysing conceptual models of climate, such as energy balance models, glaciation cycle models, or climate tipping models. Such conceptual models are simplified representation of basic climate components, and the processes that connect them, such as flows of energy or mass. Within this context such models are typically coupled ordinary differential equations (with partial or stochastic DEs also being possible).\n\nConceptualClimateModels.jl accelerates both modelling and analysis aspects of working with such models by:\n\nBuilding upon ModelingToolkit.jl for creating equations from symbolic expressions.\nUtilizing ProcessBasedModelling.jl to provide a field-specific framework that allows easily testing different physical hypotheses regarding how climate variables couple to each other, or how climate processes are represented by equations.\nOffering many predefined processes from current literature and ongoing research.\nBeing easy to extend with more climate variables or physical processes.\nAllowing the straightforward coupling of different conceptual models with each other.\nAutomating the naming of custom parameters relating to existing climate processes.\nIntegrating with DynamicalSystems.jl to automate the start-up phase of typical nonlinear dynamics based workflows.\n\nwith other features coming soon, such as:\n\nSupport for latitudinal models (where each variable is vector-valued over latitude circles)\nSupport for stochastic ordinary differential equations\n\nTo install it, run import Pkg; Pkg.add(\"ConceptualClimateModels\").\n\nAll further information is provided in the documentation, which you can either find online or build locally by running the docs/make.jl file.\n\nConceptualClimateModels.jl development is funded by UKRI's Engineering and Physical Sciences Research Council, grant no. EP/Y01653X/1 (grant agreement for a EU Marie Sklodowska-Curie Postdoctoral Fellowship).\n\n\n\n\n\n","category":"module"},{"location":"","page":"Introduction","title":"Introduction","text":"To get started with ConceptualClimateModels.jl see the tutorial. Predefined processes that can be part of a model are in the predefined processes page. See the examples for a couple of applications.","category":"page"},{"location":"#ask_questions","page":"Introduction","title":"Asking questions","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"There are three options for asking questions:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"As a new post in the official Julia discourse and ask a question under the category Specific Domains > Modelling & Simulations, also using dynamical-systems as a tag.\nAs a message in our channel #dynamics-bridged in the Julia Slack workplace.\nBy opening an issue directly on the GitHub page of DynamicalSystems.jl while providing a Minimal Working Example. This is the most useful approach when you encounter unexpected behaviour.","category":"page"},{"location":"#Contributing","page":"Introduction","title":"Contributing","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"There are many ways to contribute to ConceptualClimateModels.jl:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Just use it! Share it with your colleagues if it was useful for you, and report unexpected behaviour if you find any.\nSuggest processes that you think should be included in our library. This should be done by opening a new GitHub issue that describes the process and gives references to papers using the method.\nContribute code by adding new documentation examples.\nContribute code by implementing new processes! That is by far the most impactful way to contribute to the library.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Contributed code must be documented per the standards of DynamicalSystems.jl.","category":"page"},{"location":"tutorial/#tutorial","page":"Tutorial","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"With ConceptualClimateModels.jl one makes differential equation systems from processes. A process is simply a particular equation defining the dynamics of a climate variable. A vector of processes is composed by the user, and given to the main function processes_to_coupledodes which bundles them into a system of equations that creates a dynamical system.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"note: Familiarity with DynamicalSystems.jl and ModelingToolkit.jl\nConceptualClimateModels.jl builds on ModelingToolkit.jl for building the equations representing the climate model, and it builds on DynamicalSystems.jl to analyze the models. Familiarity with either package is good to have, and will allow you to faster and better understand the concepts discussed here. Nevertheless familiarity is actually optional as the steps required to use ConceptualClimateModels.jl are all explained in this tutorial.","category":"page"},{"location":"tutorial/#Introductory-example","page":"Tutorial","title":"Introductory example","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Let's say that we want to create the most basic energy balance model,","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"c_T fracdTdt = ASR - OLR + f","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"where ASR is the absorbed solar radiation given by","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"ASR = S (1-alpha)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"with alpha the planetary albedo, OLR is the outgoing longwave radiation given by the linearized expression","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"OLR = A + BT","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"and f some radiative forcing at the top of the atmosphere, that is based on CO2 concentrations and given by","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"f = 37log_2left(fracCO_2400right)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"with CO2 concentrations in ppm.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To create this model with ConceptualClimateModels.jl while providing the least information possible we can do:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using ConceptualClimateModels\nusing ConceptualClimateModels.CCMV\n\nprocesses = [\n    BasicRadiationBalance(),\n    LinearOLR(),\n    ParameterProcess(α),\n    CO2Forcing(), # note that for default CO2 value this is zero forcing\n]\n\nds = processes_to_coupledodes(processes)\nprintln(dynamical_system_summary(ds))","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The output is a dynamical system from DynamicalSystems.jl that is generated via symbolic expressions based on ModelingToolkit.jl, utilizing the process-based approach of ProcessBasedModelling.jl.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"As the dynamical system is made by symbolic expressions, these can be obtained back at any time:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using DynamicalSystems\n# access the MTK model that stores the symbolic bindings\nmtk = referrenced_sciml_model(ds)\n# show the equations of the dynamic state variables of the dynamical system\nequations(mtk)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"# show state functions that are observable,\n# i.e., they do not have a time derivative, they are not dynamic state variables\nobserved(mtk)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"# show parameters\nparameters(mtk)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The symbolic variables and parameters can also be used to query or alter the dynamical system. For example, we can obtain, or alter, any parameter by providing the symbolic parameter index. There are multiple ways to obtain the symbolic index provided we know its name. First, we can re-create the symbolic parameter:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"index = first(@parameters CO2_0)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Second, we can use the retrieved MTK model and access its CO2_0 parameter:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"index = mtk.CO2_0","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Third, we can use a Symbol corresponding to the variable name. This is typically the simplest way.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"index = :CO2_0","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"we can query the value of this named parameter in the system,","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"current_parameter(ds, index)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"or alter it:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"# access symbolic parameter CO2_0 from the tracked symbolic list of the model\nset_parameter!(ds, index, 800)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Similarly, we can obtain or alter values corresponding to the dynamic variables, or observed functions of the state of the system, using their symbolic indices. For example we can obtain the value corresponding to symbolic variable T by:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"observe_state(ds, T) # binding `T` already exists in scope","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"or obtain the OLR (outgoing longwave radiation)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"observe_state(ds, :OLR)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Let's unpack the steps that led to this level of automation.","category":"page"},{"location":"tutorial/#Processes","page":"Tutorial","title":"Processes","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"A process is conceptually an equation the defines a climate variable or observable. All processes that composed the system are then composed into a set of differential equations via processes_to_coupledodes (or processes_to_mtkmodel) that represent the climate model.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"For example, the process","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"T_process = BasicRadiationBalance()","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"is the process defining the variable T, representing temperature. We can learn this by either reading the documentation string of BasicRadiationBalance, or querying it directly:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using ProcessBasedModelling: lhs, rhs\n# This is the equation created by the process\nlhs(T_process) ~ rhs(T_process)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Notice that this process does not further define e.g. outgoing longwave radiation OLR(t). That is why in the original example we also provided LinearOLR, which defines it:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"OLR_process = LinearOLR()\nlhs(OLR_process) ~ rhs(OLR_process)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Each physical \"observable\" or variable that can be configured in the system has its own process. This allows very easily exchanging the way processes are represented by equations without having to alter many equations. For example, if instead of LinearOLR we have provided","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"OLR_process = EmissivityStefanBoltzmanOLR()\nlhs(OLR_process) ~ rhs(OLR_process)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"then we would have used a Stefan-Boltzmann grey-atmosphere representation for the outgoing longwave radiation.","category":"page"},{"location":"tutorial/#Default-processes","page":"Tutorial","title":"Default processes","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Hold on a minute though, because in the original processes we provided,","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"processes = [\n    BasicRadiationBalance(),\n    LinearOLR(),\n    ParameterProcess(α),\n    CO2Forcing(),\n]","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"there was no process that defined the absorbed solar radiation ASR!","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Well, ConceptualClimateModels.jl has a list of predefined processes that are automatically included in every call to processes_to_coupledodes. The default processes for the ASR is ASR = S(1-alpha) with S the solar constant. The function processes_to_coupledodes goes through all processes the user provided and identifies variables that themselves do not have a process. It then checks the list of default processes and attempt to assign one to these variables.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"If there are no default processes, it makes the variables themselves parameters with the same name but with a subscript 0.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"For example, let's assume that we completely remove default processes and we don't specify a process for the albedo α:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"processes = [\n    BasicRadiationBalance(),\n    LinearOLR(),\n    CO2Forcing(), # note that for default CO2 values this is zero forcing\n    ASR ~ S*(1-α), # add the processes for ASR, but not for S or α\n]\n\n# note the empty list as 2nd argument, which is otherwise\n# the default processes. Notice also that we make an MTK model\n# (which is the step _before_ converting to a dynamical system)\nmtk = processes_to_mtkmodel(processes, [])\n# we access the equations directly from the model\nequations(mtk)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"You will notice the equation α = α_0 where alpha_0 is now a parameter of the system (i.e., it can be altered after creating the system). The value of alpha_0 is the default value of alpha:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"default_value(α)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"# current value of the _parameter_ α_0 (not the variable!)\ndefault_value(mtk.α_0)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"When this automation occurs a warning is thrown:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"┌ Warning: Variable α was introduced in process of variable ASR(t).\n│ However, a process for α was not provided,\n│ and there is no default process for it either.\n│ Since it has a default value, we make it a parameter by adding a process:\n│ `ParameterProcess(α)`.\n└ @ ProcessBasedModelling ...\\ProcessBasedModelling\\src\\make.jl:65","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"ParameterProcess is the most trivial process: it simply means that the corresponding variable does not have any physical process and rather it is a system parameter.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"This automation does not occur if there is no default value. For example, variables that can never be dynamic state variables, such as ASR, do not have a default value. If we have not assigned a process for ASR, the system construction would error instead:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"processes = [\n    BasicRadiationBalance(),\n    LinearOLR(),\n    CO2Forcing(),\n]\n\nmtk = processes_to_mtkmodel(processes, [])","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"ERROR: ArgumentError: Variable ASR was introduced in process of\nvariable T(t). However, a process for ASR was not provided,\nthere is no default process for ASR, and ASR doesn't have a default value.\nPlease provide a process for variable ASR.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"These warnings and errors are always perfectly informative. They tell us exactly which variable does not have a process, and exactly which other process introduced the process-less variable first. This makes the modelling experience stress-free, especially when large and complex models are being created.","category":"page"},{"location":"tutorial/#Adding-your-own-processes","page":"Tutorial","title":"Adding your own processes","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"ConceptualClimateModels.jl provides an increasing list of predefined processes that you can use out of the box to compose climate models. The predefined processes all come from existing literature and cite their source via BiBTeX.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"It is also very easy to make new processes on your own. The simplest way to make a process is to just provide an equation for it with the l.h.s. of the equation being the variable the process defines.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"For example:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"@variables x(t) = 0.5 # all variables must be functions of (t)\nx_process = x ~ 0.5*T^2 # x is just a function of temperature","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"A more re-usable approach however is to create a function that generates a process or create a new process type as we describe in making new processes.","category":"page"},{"location":"tutorial/#global_vars","page":"Tutorial","title":"Premade symbolic variable instances","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"You might be wondering, when we wrote the equation ASR ~ S*(1-α) for the ASR process, or when we wrote x ~ 0.5 * T^2, where did the variable bindings ASR, S, α come from? For convenience, ConceptualClimateModels.jl defines some symbolic variables for typical climate quantities and assigns default processes to them. we brought all of these into scope when we did","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using ConceptualClimateModels.CCMV","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"where CCMV (standing for ConceptualClimateModels Variables) is a submodule that defines and exports the variables. We list all of these below. These default variables are used throughout the library as the default variables in predefined processes. When going through documentation strings of predefined processes, such as BasicRadiationBalance, you will notice that the function call signatures are like:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"BasicRadiationBalance(; T, f, kwargs...)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"There are keywords that do not have an assignment like T, f above. These always represent climate variables, never parameters, and for the variables they use the existing predefined climate variables.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Crucially, these default variables are symbolic variables. They are defined as","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"@variables begin\n    T(t) = 0.5 # ...\n    # ...\nend","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"which means that expressions that involve them result in symbolic expressions,","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"A2 = 0.5\nB2 = 0.5\nOLR2 = A2 + B2*T","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"In contrast, if we did instead","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"T2 = 0.5 # _not_ symbolic!\nOLR2 = A2 + B2*T2","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"This OLR2 is not a symbolic expression and cannot be used to represent a process.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"You can use your own variables for any of the predefined processes You can define them by doing","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"@variables begin\n    (T1_tropics(t) = 290.0), [bounds = (200.0, 350.0), description = \"temperature in tropical box 1, in Kelvin\"]\nend","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"and then assign them to the corresponding keyword argument","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"process = BasicRadiationBalance(T = T1_tropics)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Defining variables with the extra bounds, description annotations is useful for integrating with the rest of the functionality of the library.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"warn: Custom variables need to be assigned everywhere!\nAbove we assigned T1_tropics as the temperature variable. This means we also need to assign the same variable as the one setting the OLR variable by also providing the processes LinearOLR(T = T1_tropics) (for example).","category":"page"},{"location":"tutorial/#list_vars","page":"Tutorial","title":"List of premade variables","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The premade variables are not exported by default. To bring them into global scope you have to do:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using ConceptualClimateModels\nusing ConceptualClimateModels.CCMV","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"and then use them,","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"T, q, OLR","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"All the premade variables are:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"PREDEFINED_CCM_VARIABLES","category":"page"},{"location":"tutorial/#Default-values,-limits,-etc.","page":"Tutorial","title":"Default values, limits, etc.","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"All premade variables have a default value, a description, and plausible physical bounds.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To obtain the default value, use default_value(x). For the description, use getdescription(x). For the bounds, use:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"physically_plausible_limits(::Any)","category":"page"},{"location":"tutorial/#ConceptualClimateModels.physically_plausible_limits-Tuple{Any}","page":"Tutorial","title":"ConceptualClimateModels.physically_plausible_limits","text":"physically_plausible_limits(x)\n\nReturn a tuple (min, max) of plausible limiting values for the variable x. If the variable does not have defined bounds metadata, then the default value ± 20% is used. If there is no default value, a heuristic is tried, and an error is thrown if it fails.\n\n\n\n\n\n","category":"method"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"e.g.,","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"physically_plausible_limits(T)","category":"page"},{"location":"tutorial/#Automatically-named-parameters","page":"Tutorial","title":"Automatically named parameters","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"The majority of predefined processes create symbolic parameters that are automatically named based on the variables governing the processes. This default behaviour can be altered in two ways.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"For example, IceAlbedoFeedback adds named parameters to the equations whose name is derived from the name of the variable representing ice albedo:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"@variables my_ice_α(t) = 0.1 # don't forget the `(t)`!\nice_process = IceAlbedoFeedback(; α_ice = my_ice_α)\nprocesses = [ice_process]\n\nmtk = processes_to_mtkmodel(processes)\nequations(mtk)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"parameters(mtk)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"We can alter this behaviour by either providing our own named parameters to one of the keywords of the process, or wrapping a value around LiteralParameter to replace the parameter by a literal constant, like so:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"@parameters myfreeze = 260.0\nice_process = IceAlbedoFeedback(;\n    α_ice = my_ice_α,\n    Tfreeze = myfreeze, # my custom parameter\n    max = LiteralParameter(0.9) # don't make a parameter\n)\n\nmtk = processes_to_mtkmodel([ice_process])\nequations(mtk)","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"parameters(mtk)","category":"page"},{"location":"tutorial/#Integration-with-DynamicalSystems.jl","page":"Tutorial","title":"Integration with DynamicalSystems.jl","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"ConceptualClimateModels.jl integrates with DynamicalSystems.jl by providing initial condition sampling to use when e.g., finding attractors and their basin fractions with DynamicalSystems.basins_fractions, and with the function dynamical_system_summary. Moreover, since all dynamical systems generated by ConceptualClimateModels.jl have symbolic bindings, one can use the symbolic variables in e.g., interactive GUI exploration or to access or set the parameters of the system.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"physically_plausible_limits(::DynamicalSystem)\nphysically_plausible_ic_sampler\nphysically_plausible_grid\ndynamical_system_summary","category":"page"},{"location":"tutorial/#ConceptualClimateModels.physically_plausible_limits-Tuple{DynamicalSystem}","page":"Tutorial","title":"ConceptualClimateModels.physically_plausible_limits","text":"physically_plausible_limits(ds::DynamicalSystem)\n\nReturn a vector of limits (min, max) for each dynamic state variable in ds, assumming ds has been made using variables with bounds (all default symbolic variables of ConceptualClimateModels.jl satisfy this).\n\n\n\n\n\n","category":"method"},{"location":"tutorial/#ConceptualClimateModels.physically_plausible_ic_sampler","page":"Tutorial","title":"ConceptualClimateModels.physically_plausible_ic_sampler","text":"physically_plausible_ic_sampler(ds::DynamicalSystem)\n\nReturn a sampler that can be called as a 0-argument function sampler(), which yields random initial conditions within the hyperrectangle defined by the physically_plausible_limits of ds. The sampler is useful to give to e.g., DynamicalSystems.basins_fractions.\n\n\n\n\n\n","category":"function"},{"location":"tutorial/#ConceptualClimateModels.physically_plausible_grid","page":"Tutorial","title":"ConceptualClimateModels.physically_plausible_grid","text":"physically_plausible_grid(ds::DynamicalSystem, n = 101)\n\nReturn a grid that is a tuple of range objects that each spans the physically_plausible_limits of ds. n can be an integer or a vector of integers (for each dimension). The resulting grid is useful to give to DynamicalSystems.AttractorsViaRecurrences.\n\n\n\n\n\n","category":"function"},{"location":"tutorial/#ConceptualClimateModels.dynamical_system_summary","page":"Tutorial","title":"ConceptualClimateModels.dynamical_system_summary","text":"dynamical_system_summary(ds::DynamicalSystem)\n\nReturn a printable/writable string containing a summary of ds, which outlines its current status and lists all symbolic equations and parameters that constitute the system, if a referrence to a ModelingToolkit.jl exists in ds.\n\n\n\n\n\n","category":"function"},{"location":"tutorial/#API-Reference","page":"Tutorial","title":"API Reference","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"processes_to_coupledodes\nprocesses_to_mtkmodel","category":"page"},{"location":"tutorial/#ConceptualClimateModels.processes_to_coupledodes","page":"Tutorial","title":"ConceptualClimateModels.processes_to_coupledodes","text":"processes_to_coupledodes(processes, default = DEFAULT_PROCESSES; kw...)\n\nConvert a given Vector of processes to a DynamicalSystem, in particular CoupledODEs. All processes represent symbolic equations managed by ModelingToolkit.jl. default is a vector for default processes that \"process-less\" variables introduced in processes will obtain. Use processes_to_mtkmodel to obtain the MTK model before it is structurally simplified and converted to a DynamicalSystem. See also processes_to_mtkmodel for more details on what processes is, or see the online Tutorial.\n\nKeyword arguments\n\ndiffeq: options passed to DifferentialEquations.jl ODE solving when constructing the CoupledODEs.\ninplace: whether the dynamical system will be in place or not. Defaults to true if the system dimension is ≤ 5.\nsplit = false: whether to split parameters as per ModelingToolkit.jl. Note the default is not ModelingToolkit's default, i.e., no splitting occurs. This accelerates parameter access, assuming all parameters are of the same type.\nkw...: all other keywords are propagated to processes_to_mtkmodel.\n\n\n\n\n\n","category":"function"},{"location":"tutorial/#ProcessBasedModelling.processes_to_mtkmodel","page":"Tutorial","title":"ProcessBasedModelling.processes_to_mtkmodel","text":"processes_to_mtkmodel(processes::Vector, default::Vector = []; kw...)\n\nConstruct a ModelingToolkit.jl model/system using the provided processes and default processes. The model/system is not structurally simplified.\n\nprocesses is a vector whose elements can be:\n\nAny instance of a subtype of Process.\nAn Equation which is of the form variable ~ expression with variable a single variable resulting from an @variables call.\nA vector of the above two, which is then expanded. This allows the convenience of functions representing a physical process that may require many equations to be defined.\n\ndefault is a vector that can contain the first two possibilities only as it contains default processes that may be assigned to variables introduced in processes but they don't themselves have an assigned process.\n\nIt is expected that downstream packages that use ProcessBasedModelling.jl to make a field-specific library implement a 1-argument version of processes_to_mtkmodel, or provide a wrapper function for it, and add a default value for default.\n\nKeyword arguments\n\ntype = ODESystem: the model type to make\nname = nameof(type): the name of the model\nindependent = t: the independent variable (default: @variables t). t is also exported by ProcessBasedModelling.jl for convenience.\n\n\n\n\n\n","category":"function"},{"location":"tutorial/#new_processes","page":"Tutorial","title":"Making new processes","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"To make a new processes you can:","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Create a function that given some keyword arguments (including which symbolic variables to use) uses one of the existing generic processes to make and return a process instance. Or, it can return an equation directly, provided it satisfies the format of processes_to_mtkmodel. For an example of this, see the source code of SeparatedClearAllSkyAlbedo or EmissivityFeedbackTanh.\nCreate a new Process subtype. This is preferred, because it leads to much better printing/display of the list of processes. For an example of this, see the source code of IceAlbedoFeedback. To create a new Process see the API of ProcessBasedModelling.jl or read the documentation string of Process below.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Process","category":"page"},{"location":"tutorial/#ProcessBasedModelling.Process","page":"Tutorial","title":"ProcessBasedModelling.Process","text":"Process\n\nA new process must subtype Process and can be used in processes_to_mtkmodel. The type must extend the following functions from the module ProcessBasedModelling:\n\nlhs_variable(p) which returns the variable the process describes (left-hand-side variable). There is a default implementation lhs_variable(p) = p.variable if the field exists.\nrhs(p) which is the right-hand-side expression, i.e., the \"actual\" process.\n(optional) timescale(p), which defaults to NoTimeDerivative.\n(optional) lhs(p) which returns the left-hand-side. Let τ = timescale(p). Then default lhs(p) behaviour depends on τ as follows:\nJust lhs_variable(p) if τ == NoTimeDerivative().\nDifferential(t)(p) if τ == nothing.\nτ_var*Differential(t)(p) if τ isa Union{Real, Num}. If real, a new named parameter τ_var is created that has the prefix :τ_ and then the lhs-variable name and has default value τ. Else if Num, τ_var = τ as given.\nExplicitly extend lhs_variable if the above do not suit you.\n\n\n\n\n\n","category":"type"}]
}
